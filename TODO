- SQL schema should support folders, i.e., user can group feeds into
  categories. By default, all feeds go in a " root" folder (the
  leading space marks this as special; strip space from user-defined
  folders).
- User should also be able to drag feeds around, so they're listed in
  arbitrary order. Need an "nth" field somewhere, giving the numeric
  order in which the feed is listed.
	Ideally, it should be possible to have a feed in multiple
  folders (e.g., Pharyngula goes in both "Science" and "Atheism", or
  Daily Kos goes in both "Politics" and "Stuff I Read Daily"), so need
  a separate entry (and nth field) for each instance. And each user.
- Folders can contain subfolders, and so on. So each folder needs a
  pointer to its parent folder.
- Item states: each post/article/item can be in one of several states:
	new	Never seen. Added since the last time any articles
		  were read
	unread	Presented to the user at least once, but not marked as
		  read.
	read	Marked as read, but not yet deleted.
	deleted	Deleted, but not yet expunged from database. This may
		  or may not be useful.
- How to deal with password-protected feeds (e.g., LiveJournal feeds,
  which may include friends-only items)?
	Curl plugin has CURLOPT_HTTPAUTH, which might do the trick.
  Perhaps set this to CURLAUTH_ANYSAFE.
	CURLOPT_USERPWD can be set to the username and password to use.
- LiveJournal plugin (or something): would be nice to be able to say
  "I'm user So-and-so at LiveJournal" (or other site using the LJ
  code) and have it automatically subscribe to your friends feeds
  there.
	Need to somehow keep track of the fact that these feeds were
  auto-generated. If I change my password on LiveJournal, I should
  only have to change it once (in the LJ plugin config) and have the
  engine figure out that the password for all the LJ-friends feeds has
  changed as well.
- Multi-user support: this would be nice. It would also be nice if the
  back-end could avoid duplicating information, i.e., not store two
  records for the same article.
	However, for now, there is enough user-specific information in
  the schema for both feeds and items that this isn't practical. Start
  out with naive implementation, and see if anyone starts using it on
  a multi-user system.
- User authentication: should this be done here, or in .htaccess?
- See what fields tend to come with the various RSS-like types, and
  see which ones ought to be included in the database.
- Deal with malformed text in the RSS feed, e.g., unescaped or
  poorly-escaped entities, and the like.
- Would be nice if engine could update multiple feeds at the same
  time, so that a single unresponsive host doesn't cause a long wait.
	Use curl_multi_*, to fetch multiple feeds at once.
- Smarty(?) PHP templates for different skins: full-featured browser
  vs. palmtop vs. phone, etc.
- Passwords: need somewhere to store them (outside www tree,
  preferably), some way of getting them to the server securely.
- Killfile: automatically mark as read messages that match certain
  criteria.
	Perhaps this should have a scoring system or something: I'd
  like to killfile the stories on dKos that match /\w\w-\d\d/ (because
  those talk about specific senate/house races that I generally don't
  care about), but show the ones that match /MD-\d\d/, since I do care
  about those. Or kill the "diary rescue" threads, unless they contain
  "arensb".
- Smart groups: like iTunes smart playlists, or killfiles (above):
  automatically populate a group based on user-specified criteria.
	In fact, ordinary feeds could be implemented with this
  mechanism: the ordinary dKos article list could simply be the set of
  all articles that come from the dKos feed.
- Don't want to automatically display a feed's image: some are good
  (like LJ icons), others are annoying, like FeedBurner feeds that
  just have a "Feed powered by FeedBurner" image.
- For each feed, give the option of displaying just the image (if
  any), the title, or both.
- Should feed images be cached locally? How to tell when they're out
  of date?
- For each feed and item, should store unrecognized elements
  (especially in specialized namespaces like "lj") separately, in case
  a plugin can make use of it.
	For instance, an LJ plugin can show who posted an article in a
  community journal, or display appropriate mood and visibility icons.

	AFAICT getDocNamespaces() returns the namespaces that are
  declared within a document, while getNamespaces() returns the ones
  that are actually used. Of course, in a well-formed document, any
  namespace that's used will also be declared.
	Experimentation shows that if there's an element with an
  undeclared namespace, it won't show up in either list. So don't use
  those. But if a declaration is buried deep within the document,
  it'll show up in getDocNamespaces(true).
	Perhaps the sensible thing to do is to look at three levels:
  the document, feed, and item level; see which namespaces are used,
  and for each one, see whether there's a plugin that'll handle that
  namespace (as defined by its DTD).
	Some namespaces seem to be fairly common, e.g.
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
  Should have built-in handlers for these. Also ought to have plugins
  to add one's own handlers (hooks).

	Also, note that elements in one namespace can have attributes
  in another, e.g.:
	<rss xmlns="http://www.foo.com/"
	     xmlns:bar="http://www.bar.com/">
	<channel>
	  <item bar:type="article">
	    <!-- "item" is in namespace "", but "type" is in namespace
	    "bar" -->
- Make curl (and other modules) optional: use references-to-functions
  to pick the appropriate function to call:
	function fetch_rss_curl(...) { ... }
	$fetch_rss = fetch_rss_curl;
	$fetch_rss($url);
- Provide hooks for various plugins to do their thing.
- Would be nice to have "(more)" link at the bottom, for items where
  description/summary isn't the whole article.
	Should also have "mark as read" buttons at top and bottom of
  article: top for when the subject is enough to know you want to skip
  it, and bottom for marking it as done after you've read it.
- In Ajax mode, marking an item as read should tell the server to
  delete it now, so that if you switch from workstation to laptop,
  your feeds are already up to date.
- Automatic cleanup: need to periodically delete old items. How? When?
	Should cron be able to do this?
	When updating feed is probably a good time.
- Perhaps extend Smarty, so don't need to set the paths every time.
- Need a good way to abort in case of error.
- Tool to import feeds and items from existing Feed on
  Feeds/Monkeychow database.
- In common.inc (or something), need a good function to abort with an
  error.
- Rewrite the XML-parsing code using XMLReader or XML Parser.
- Rename "config.php" to "config.inc".
- Better separation between public and private files: *.php scripts
  need to be in DocumentRoot so browser can find them. *.inc files,
  smarty files, and (potentially) plugins need not be. And since
  "config.inc" has database password and such, it's a good idea to put
  it outside of DocumentRoot, in case of misconfigured .htaccess or
  something.
