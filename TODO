- Bug: When subscribing to a feed, the initial display doesn't work:
  subscribe to a new feed, which gets ID 999. This redirects you to
  .../view.php?id=999.
	init() gets 'feeds' from cache, then calls set_feed_fields().
	set_feed_fields() tries to get its information from 'feeds',
  but that's a cached version that doesn't have the new feed yet.
- Bug: When I changed the feed URL for The Atheist Experience, the
  posts appear out of order: last_update is when it was refreshed, but
  the pub_date is when the post was published:
	mysql> select pub_date, last_update from items where !is_read and feed_id=50;
	+---------------------+---------------------+
	| pub_date            | last_update         |
	+---------------------+---------------------+
	| 2012-02-23 19:02:56 | 2012-03-07 09:14:01 |
	| 2012-02-24 09:34:12 | 2012-03-07 09:14:01 |
	| 2012-02-25 18:29:40 | 2012-03-07 09:14:01 |
	| 2012-02-26 20:48:49 | 2012-03-07 09:14:01 |
	| 2012-02-27 19:05:02 | 2012-03-07 09:14:01 |
	| 2012-02-28 09:29:09 | 2012-03-07 09:14:01 |
	| 2012-02-28 18:12:45 | 2012-03-07 09:14:01 |
	| 2012-03-02 14:48:49 | 2012-03-07 09:14:01 |
	| 2012-03-04 18:23:50 | 2012-03-07 09:14:01 |
	| 2012-03-05 17:51:24 | 2012-03-07 09:14:01 |
	+---------------------+---------------------+
  In this case, last_update should default to pub_date. Or something.
- Bug?: Automatic RSS redirect: This got broken by the "Stop SOPA"
  protest, when several sites redirected their RSS feeds to an
  anti-SOPA page. After that, several feeds got stuck on that page, so
  they didn't update.
	Perhaps the best thing to do would be to not redirect
  automatically, but to generate a fake article in feed 0 saying where
  the feed got redirected to. Perhaps include a link to 'editfeed.php'
  with the new URL.
	Update editfeed.php to allow supplying a new parameter.
	What about when a feed URL is good, but includes a (wanted)
  redirect? Ought to have some list of redirects to ignore.
- Bug?: There are some old articles in the database. Why aren't they
  being cleaned out properly?
	db_update_feed() only cleans out whichever feed it was called
  with. There's nothing to clean out all feeds, including inactive
  ones.
	Arguably this isn't that much of a problem with inactive
  feeds, since the number of articles won't grow.
	But some active feeds aren't being cleaned out either.
  Apparently this is because the URLs are dead.
- Bug: Post titles (and other things) sometimes have "&" instead of
  "&amp;".
	Need to figure out whether we want to store things as "text"
  or HTML in the database.
	Storing as HTML means we get to preserve markup, e.g., if a
  title uses an italicized phrase or a weird entity. For this to work,
  need to go through the feed-parsing code and make sure that if a
  title is text, we convert to HTML; if it's HTML, we merely clean it
  up.
	Assume that any text-type text (titles, summaries, contents)
  are HTML, and therefore need to be cleaned up.
	Email addresses are text, but should probably be sanitized.
	Author names... not sure. There may be non-ASCII characters,
  and different people may deal with this differently (UTF-8 vs. HTML
  entities). Perhaps safest to assume that they're HTML and clean up
  (if possible, only do entity translation, and throw out any markup).
- Bug: keybindings.js doesn't handle non-letter bindings well: "?"
  gets turned into Spanish upside-down question mark by toUpperCase().
	Need a notation to bind Esc.
- Get rid of the skin stuff. It's a goddamn mess.
- Authentication: perhaps allow clients to send either a cookie, or an
  auth=<token> parameter. That might be easier for REST.
- Detecting online/offline status: discussion at
  http://stackoverflow.com/questions/3181080/how-to-detect-online-offline-event-cross-browser
	There's a library for that:
  https://github.com/HubSpot/offline
- Look for better fonts?
  http://www.fontsquirrel.com/
- CSS text-overflow property:
  http://www.w3schools.com/cssref/css3_pr_text-overflow.asp
	text-overflow: "clip" | "ellipsis" | <string>;
  When text doesn't fit into the alloted box, can use an ellipsis for
  the text that doesn't fit.
- Is it worth making the back-end RESTful? See:
  http://www.infoq.com/articles/rest-introduction
  This might be more of a headache than it's worth: to do it elegantly
  would mean fixing all of the back-end scripts to accept methods
  other than GET and POST: DELETE, PUT, etc. (see
  http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html ) would all
  have their own meanings.
	Plus, apparently REST encourages you to use full URLs for
  resources, rather than internal identifiers. But here we don't
  really have anything worth sharing with the wider world, IMHO.
- "use strict": apparently modern JavaScript implementations grok
	"use strict";
  https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode
	Put '"use strict";' at the top of the script, at the global
  level, to turn on strictness for an entire script. Or after the
  opening brace to turn it on for a function.
	Tue Oct 23 09:06:52 2012: But this doesn't seem to change
  anything. Perhaps because javascript.options.strict is already
  turned on in about:config.
	- Variables must be declared; using an undeclared variable is
  an error.
	- Assignments that would normally fail silently throw an
  error.
	- Deleting undeletable properties throws an error.
	- Can't have duplicate properties in object literal:
	  var o = { foo: 1, foo:2 };
	  works normally, but fails under strict.
	- Require unique argument names to functions.
	- Forbids octal syntax.
  Apparently JSLint prefers the syntax
	(function() {
		"use strict";
		... body of script ...
	})();
- Vibrating:
	window.navigator.vibrate(200)
		Vibrate for 200 ms.
	window.navigator.vibrate([200, 100, 200])
		Vibrate for 200ms, then pause for 100ms, then vibrate
		for 200ms
  Unfortunately, only Firefox for Android currently supports this
  AFAIK.
- Getters and setters:
  https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Working_with_Objects?redirectlocale=en-US&redirectslug=Core_JavaScript_1.5_Guide%2FWorking_with_Objects#Defining_getters_and_setters
- Profiling: according to 
  http://fuelyourcoding.com/webkits-javascript-profiler-explained/
  can turn Webkit (Chrome/Safari) profiling on and off with
	console.profile("my profile name");
	<code to profile>
	console.profileEnd("my profile name");
- Possible feature: "save for later": Grab a random web page and turn
  it into a post in an artificial feed.
	Could do this with a bookmarklet that grabs the current
  location and submits that to a script.
	Need to analyze the content of the page somehow. Perhaps can
  check to see whether it contains "<article>...</article>" and if so,
  use that. Otherwise... not sure.
- Le Monde titles: apparently their RSS feed uses UTF-8 for nearly
  everything, but Windows-1252 for _some_ titles. Can't fix. Won't
  fix.
	Or maybe they use Windows-1252 for everything, and just claim
  that it's UTF-8.
- Mutation events (like "DOMNodeInserted" in js/PatEvent.js) are
  apparently now deprecated in favor of the DOM MutationObserver:
  https://hacks.mozilla.org/2012/05/dom-mutationobserver-reacting-to-dom-changes-without-killing-browser-performance/
- Events to look up:
  https://developer.mozilla.org/en-US/docs/tag/events

  devicelight: ambient light sensor:
	https://developer.mozilla.org/en-US/docs/DOM/DeviceLightEvent
	Could use this to switch to dark theme at night.
	But apparently not supported by Android or Mobile Safari.
  devicemotion: accelerometer
  deviceorientation: device has rotated (landscape <-> portrait)
  deviceproximity: proximity of physical object (?)
  drag: when element or text selection being dragged
  dragend: when drag operation has ended
  dragenter: 
  dragleave: 
  dragover: 
  dragstart: 
  drop: 
  durationchange: 
  emptied: 
  ended: 
  focus: 
  hashchange: when hash part of URL in URL bar changes.
  input: 
  invalid: 
  loadeddata: 
  loadedmetadata: 
  loadstart: 
  message: 
  mozfullscreenchange: 
  mozfullscreenerror: 
  mozpointerlockchange: 
  mozpointerlockerror: 
  offline: 
  online: 
  pagehide: 
  pageshow: 
  paste: 
  pause: 
  play: 
  playing: 
  popstate: 
  progress: 
  ratechange: 
  reset: 
  resize: 
  scroll: 
  seeked: 
  seeking: 
  select: 
  show: 
  stalled: 
  submit: 
  suspend: 
  timeupdate: 
  unload: 
  userproximity: 
  volumechange: 
  waiting: 
- document.querySelector() and .querySelectorAll() look massively
  useful:
  http://www.javascriptkit.com/dhtmltutors/css_selectors_api.shtml
- location.replace(url): fills in url in the URL bar, and immediately
  redirects to that location.
	However, if the current and new URLs differ only in the bit
  after "#", it doesn't reload anything. So this is a way to change
  the current URL in the URL bar, without having to reload the page.
	This works in Chrome, but Firefox throws an
  apparently-harmless exception.
- <element>.getBoundingClientRect():
  https://developer.mozilla.org/en-US/docs/DOM/element.getBoundingClientRect
  returns a struct with the top, bottom, left, right of the element,
  relative to the window, I think. Basically, this means that:
	el = <some element>
	box = el.getBoundingClientRect()
  If box.top < 0, the top of the element is above the viewport.
  If box.bottom < 0, the bottom of the element is above the viewport.
- Probably time to switch to a real JS template library. Perhaps
  http://handlebarsjs.com/
  unless there's something better. JQuery apparently has some good
  stuff, including a template plugin.
- SED_REPLACEMENTS is bulky and awkward. It'd probably be best to
  generate a 'replace.sed' script (or something) in the top directory.
  It can then be used by every other Makefile.
- Are htdocs/skins/fancy/abort.php, abort.css even used? If not,
  delete them.
	Yes: it's used by 'abort()' in lib/common.inc, so a URL like
  'view.php?id=nonexistent' pops up a page that uses that template.
- localStorage: performance sucks under Firefox. See
  http://hacks.mozilla.org/2012/03/there-is-no-simple-solution-for-local-storage/
  for possible replacements: IndexedDB (Chrome, Firefox) or WebSQL
  (for mobile Safari, Android).
	WebSQL is allegedly deprecated by w3. But mobile Safari and
  Android seem to run fine. So perhaps just use IndexedDB on Firefox,
  and retain localStorage on the others?
	See also
  https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API
- Problem with current sync (as of v988): say you have a browser
  viewing only a feed like Zero Punctuation, which is only updated
  once a week.
	cache.get_marked() will get all marked items newer than the
  oldest item in the cache. In this case, that means it'll have to
  plow through hundreds or thousands of irrelevant updates with only
  one or two items that are actually in cache.
	Perhaps a better approach would be something more like PalmOS
  syncing: the client says what it has in cache, and the server tells
  it what it ought to have. Preferably this should come in both slow
  and fast sync varieties: slow to get all changes, fast to, well, be
  fast: only update those things that have changed since a given time.
- Sync: Probably ought to split up "updates" into multiple phases:
	- Send articles that have been marked read/unread
	- Get articles that have been marked read/unread since time T
	- Get new articles
  Also, need to store time of last update in localStorage.
	Probably not worth having a feed ID for getting list of marked
  items.
- List of Mobile Safari events:
  http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html#//apple_ref/doc/uid/TP40006511-SW5
  (Select "Supported Events" if that doesn't work)
  pageshow/pagehide:
  https://developer.mozilla.org/En/Using_Firefox_1.5_caching#pageshow_event
  Looks like they're similar to load/unload events, except they fire
  even when a page is loaded from cache.
- WebStorage spec (http://www.w3.org/TR/webstorage/) says that when a
  value in localStorage is modified, it triggers an event in other
  Windows that have access to that database. This could be useful.
	window.addEventListener("storage",
		function(ev) {
			console.log("Got a storage event: %s was %s, now %s",
				    ev.key, ev.oldValue, ev.newValue);
		},
		false);
- Perhaps add Xdebug extension for PHP: profiler.
- Speed: jsonify() is apparently quite a time hog: adds ~15% time
  to just using json_encode().
  UPDATE: or maybe not. Can't reproduce.
	lib/json.inc
	lib/common.inc
	htdocs/markitems.php
	htdocs/update.php
	htdocs/skins/fancy/view.php
	htdocs/feeds.php
	htdocs/view.php
- Add a /* SCHEMA */ comment everywhere where the code needs to be
  modified when the schema changes.
- WaPo articles have <wp:web-link>, <wp:mobile-link>, <wp:share-link>,
  <wp:search-link>.
	<wp:mobile-link> is not, unfortunately, a link to a
  mobile-friendly web page. It does, however, contain
  <ece:field name="body">, which contains the full text of the
  article, or at least a longer excerpt than the normal RSS feed. This
  could conceivably be used to get a better 'content' field.
	For efficiency, ought to fetch this only when an item is being
  added, or when it has been modified since first publication.
- Perhaps add another phase to collecting articles: examining
  individual posts. Plugins could go here.
	The idea is: update_feed() fetches a given feed and parses it
  into articles and such. Then, when that's done, feed each (new?)
  article to a plugin that can rewrite the article.
	This plugin can do things like:
	- For GoComics feeds, scrape the article page and retrieve the
  URL for the image (look for a <div> with class "comic", or whatever
  it is). Rewrite item.summary to include the image.
	- For Washington Post articles, scrape the page and get the
  keywords from the HTML header:
	<meta name="keywords" content="virginia,democrats,education,state budget,legislators"/>
  It can use this to tag an article by keywords, or even auto-kill the
  sports articles.
	The latter can also be done by looking at <pheedo:origLink>,
  to find articles at http://www.washingtonpost.com/sports/...
- Possible improvement: move static content to a different domain, one
  that doesn't requie cookies.
- Perhaps a way to get row number, and get the N rows around a given row:
  http://jimlife.wordpress.com/2008/09/09/displaying-row-number-rownum-in-mysql/
- Perhaps install PHP pcntl module? Includes fork(), exec(). This
  could be useful for a long-running tool on the server that sends
  updates on article status to the client(s).
- Key bindings: This is way more complicated than it ought to be:
	It looks as though there's keyboard focus, which has nothing
  to do with where the mouse it (i.e., HTML/DOM has no concept of
  focus-follows-mouse). Rather, the key event goes to whichever
  element has keyboard focus (which is originally the body, I guess),
  and (apparently) bubbles up from there.
	In order to have a completely generic "bind any keymap to any
  element" setup with focus-follows-mouse, we'd need to keep track of
  every element that has keydown events associated with it: when the
  mouse enters, call element.focus() on it, and when the mouse leaves,
  call element.blur(). (Also apparently need to
  setAttribute('tabindex', 0) for some reason.)
	Since (I think) we only want to bind events to items and to
  the window as a whole, the best solution seems to be to keep track
  _enter and _exit evenst (which we do) to see which item is the
  current one, and have a window-level handler "keydown" handler to
  invoke the proper function on the current item.
- Script to provide an RSS/Atom feed of the stuff in the database, for
  Calibre.
	Presumably should return the last 24 hours' worth of articles.
	Perhaps should support individual feeds, or groups (once those
  exist).
	What should the limiting factor(s) be? Currently there can be
  > 500 items in a day.
- Template.expand should return a DOM object, not a string.
- Kindle: make checkboxes bigger.
- Integrate keybinding stuff into PatEvent.
- Move event handlers over to bind_event().
	Fix update_feed(id) to work with bind_event (i.e., take only
  one argument).
	I think this means fixing bind_event to store a keytab with
  each 
- What's the best way to handle XKCD mouseover text on mobile devices?
  Perhaps an HTMLPurifier plugin that finds <img alt="foo"/> and puts
  the alt-text under the image, as a caption?
	Or perhaps put a button next to the image, which expands into
  a box with the alt-text?
- Is it possible to add a "share" button to articles, for sharing on
  various social networks? (G+, Facebook, Twitter, etc.)
	For Twitter: build a button at
  http://twitter.com/about/resources/tweetbutton
	For G+: this might do the trick:
  http://www.google.com/intl/en/webmasters/+1/button/index.html
	Facebook: this, or something related?:
  http://developers.facebook.com/docs/reference/plugins/send/
- markitem code in view.jsh is old and crufty. Fix it.
	Use AJAX call from xhr.
- Perhaps have "login" as an AJAX service. Send credentials to a
  password-protected page; have the page send back a JSON status
  message and a cookie that can be used to retrieve the other pages.

	When an AJAX request to sync.php is made and the session has
  expired, the server sends back:

	[17:50:19.852] <?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
		"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
	<html>
	<head>
	<title>NewsBite: Error</title>
	<link rel="stylesheet" type="text/css" href="skins/fancy/style.css"
	  media="all" />
	<link rel="stylesheet" type="text/css" href="skins/fancy/abort.css"
	  media="all" />
	</head>
	<body id="abort-body">
	
	<h1>Error</h1>
	
	<p>Invalid feed ID: &quot;&quot;.</p>
	
	<hr/>
	
	<ul>
	  <li><a href="index.php">Feed index</a></li>
	</ul>
	
	</body>
	</html>
	 @ http://www.ooblick.com/newsbite/skins/fancy/view.js:145

- Maybe ought to store a feed's language, so that we can figure out
  how to sort its name correctly in the main feed display (e.g.,
  "Le Monde" (fr) => "MONDE LE", and "El Mundo" (es) => "MUNDO EL").
	This can be guessed from the <language> tag in RSS (Atom
  doesn't seem to specify), but Le Monde, at least, doesn't bother to
  say that it's in French.
	Make this a feed option.
- Spinny thing when updating feeds:
  Create a single image with all of the various states a feed can be
  in: normal, updating, error. Then use CSS to set a class, which in
  turn shifts the background image up or down to display the
  appropriate icon.
	Perhaps have it use the "number of unread articles" column, so
  as to take up less space on the iPhone.
- Dates in the database are hopelessly fucked. I'm not sure what I was
  trying to do anymore, and when you download a lot of articles from a
  new feed, they show up in some bizarre order.
	I think the things I care about are:
	- When was this article put out on the net?
	- (Maybe) When did the author last revise this article?
	- How long has it been since anything was posted to this feed?
	- When's the last time I successfully got the contents of this
	  feed?
	- mtime: when did I mark this article as read/unread?

	lib/database.inc: feeds.last_update should be computed from
  items.pub_date. Ignore anything it says in <rss><channel><pubDate>.
	We could _almost_ just compute feeds.last_update on the fly,
  as the latest item.pub_date, but for one thing: if all of the items
  get expired and deleted, we still want to know that the last item
  was posted on such-and-such date.
- Feeds page:
	Instead of "Tools" and "Details" cluttering up the page, just
  list the #unread, title, and a ">>" link that pops up a details/edit
  page.
- Feeds page drop-down menus: use an onclick to toggle menu on and
  off, for mobile devices and such.
- Editing feed details: instead of (or in addition to) a separate
  "edit feed" page, have an "edit" button on the page for a given
  feed. When clicked, highlight the parts that can be edited: title
  (edit the nickname).
	Actually, the nickname is the only visible element that it
  makes sense to edit this way. For the rest, there could be a form
  overlaid over the feed.
- To make things really fancy, could have live updating of article
  status on multiple devices: Have the client open a persistent
  connection to the server (basically, a PHP script that never exits).
  Over this channel, the server announces changes to items. So if
  client A marks item 12345 as read, this information gets broadcast
  to all connected clients, and they can update their displays
  accordingly.
- JavaScript with namespaces
	Things like the Google +1 button use a namespace: <g:plusone> or
  whatever it is. This seems fairly useful.
	What would be useful would be the ability to get a list of all
  tags in a given namespace: if I have a bunch of <foo:a>, <foo:b>,
  <foo:c>, ... tags sprinkled through a document, it'd be nice to get
  them all without having the parse the DOM.
	Looks like the way to do this is
  getElementsByTagNameNS("http://namesp.ace/URL", "*");
  See
  http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-A6C9094
- Publisher guidelines from readability.com:
  http://www.readability.com/publishers/guidelines/
  This should make things show up better in Safari Reader.
  - <article>
    - class="hentry"
    Firefox doesn't grok <article> yet. This breaks CSS.
    Firefox 3 apparently groks <article>
  - class="entry-title" for post title.
  - <time class="updated" datetime="2011-10-24 10:11:12-0400" pubdate>whenever</time>
    "updated" for hAtom; "pubdate" for Reader.
  - <p class="byline author vcard"><span class="fn">John Q. Author</span></p>
    Who wrote the article.
  - <div class="entry-content">
    Content of the post.
  - <div class="entry-content-asset">...</div>
    Mark images and such that are directly related to the post.
- Apparently iOS JS can use accelerometer:
  http://developer.apple.com/library/safari/#documentation/SafariDOMAdditions/Reference/DeviceMotionEventClassRef/DeviceMotionEvent/DeviceMotionEvent.html#//apple_ref/doc/uid/TP40010525
	Perhaps use "shake" to mean "refresh"?
	Also rotation:
  http://developer.apple.com/library/safari/#documentation/SafariDOMAdditions/Reference/DeviceOrientationEventClassRef/DeviceOrientationEvent/DeviceOrientationEvent.html#//apple_ref/doc/uid/TP40010526
- Would hAtom or hNews be useful?
  http://microformats.org/wiki/hAtom
  http://microformats.org/wiki/hnews
  Might be able to mark things up for Safari reader and/or other
  readers. Perhaps might even be able to reuse some class names.
- Can HTMLPurifier add a base URL to relative links? That is, if it
  sees
	<a href="/foo">
  can it be told to turn that into
	<a href="http://www.somesite.com/foo">
  ? Ditto for images and perhaps others.
	See
  http://htmlpurifier.org/live/configdoc/plain.html#URI.MakeAbsolute
  Presumably ought to pass base URL in as a second parameter.
- Add Google +1 button
	http://www.google.com/intl/en/webmasters/+1/button/
	Problem: it seems to take a lot of time to render and such. Is
  it worth it? Should it be optional? Is it possible to have each
  button rendered in turn? Or am I just imagining problems that aren't
  really there?
	Can this be made a plugin?
	Or add this to a "share" button.
- Minify and compress supporting files.
	http://code.google.com/p/minify/
  Can run this as:
	php-cgi /path/to/minify/min/index.php f=/path/to/foo.js > foo.js.min
  Also compress it.
	Question: does minifying make compression less efficient? Or
  does it remove enough useless fluff that the less-efficient
  compression is still worth it?
	minify adds headers. Is this desirable?
- Minify CSS, JS: there are various minification tools out there that
  will strip comments, extraneous whitespace, etc. from CSS or JS
  files.
	Like compressing, this should be done at install time.
- Split up distribution.
	There should really be two distros: one for hackers who want
  the source, and one for people who want to install it.
	The hacker distro is pretty easy: it's just all of the source
  files and such, a copy of ~/proj/newsbite without the .git noise.
	For the installer distro, ought to have a number of
  directories, for all the various directories where things can be
  installed:
	htdocs (must go in DocumentRoot)
	lib (can go outside of DocumentRoot)
	plugins
	...
  Ideally, should have an external config file that says where to
  install everything, one that users can carry forward when they
  upgrade. Also, the installer makefile shouldn't have any
  dependendies on git (neither should the hacker one, really).
	Also, in the installer distro, the CSS and JS files should be
  minified and compressed.
	In PHP, can use 'if (extension_loaded("mysql"))' to find out
  whether a given module is loaded. Can use
  '$module_list = apache_get_modules()' to get list of available
  Apache modules. Can use this to suggest a .htaccess to the user.
- dKos text looks funny: first paragraph is indented less than
  subsequent ones. Is this something that can be fixed?
	It has
		text text
		<p>More text</p>
		<p>yet more text</p>
  IOW non-paragraph text isn't being indented. Should HTMLPurify clean
  this?
	This happens anywhere there are paragraphs, including inside
  <description> and inside <blockquote>
- Function to add an article to a phony feed. This can be used to give
  status reports on update, and stuff like that.
	Can use internal-rss.php or some such to generate a bogus RSS
  feed, or something. Or even flag them in the database.
- Plugin API: perhaps should have a standard return status indicating
  what happened, e.g.:
	0 - Didn't run (conditions not met)
	1 - Ran, but no change
	2 - Ran, made a change
  Or something like that. The idea being that we can at some point
  collect statistics and see which plugins run when. In particular, we
  want to see when a plugin stops working because the feed changed the
  format of its web bugs or whatever.
- Standalone app: put up a spinner or something when updating cache.
	See downspout:/folks/htdocs/app/app.js
  Could perhaps use u256d-u2570 (probably not, though), or u2596-u259f,
  u25d0-u25d3, u25d4-u25d7, u25dc-u25df, u25f4-u25f7
- Smart ordering: The system potentially has access to a lot of
  information about reading habits:
  - how often a given feed gets updated
  - length of summary and content
  - whether there are images in posts
  - when an article is visible in the window (maybe not on mobile devices?)
    - whether article is fully visible
    - whether the entire article was ever shown
  - which button was used to mark article as read (top or bottom)
  - when an article was marked read:
    - time since the last article was marked
    - time of day when the article was marked
    - day of week when the article was marked
  - location where the article was marked
  - keywords in the article
    - title
    - summary
    - content
    - other meta keywords

	All of this could potentially be used as input to a
  machine-learning system to figure out what I want to read, in what
  order, and let articles bubble to the top accordingly (e.g., it'd be
  nice if it could figure out that I want to catch up on comics; let
  rarely-updated friend blogs bubble up to the top, and so on).
	Problem is figuring out how to tell whether it's doing a good
  job or not, i.e., whether I've actually read an article or not.
	If I mark a long article as read, one second after marking the
  previous one, then presumably that means that I didn't read it. But
  how to tell whether I've read an article?
- Perhaps put git rev in authentication cookie? That way, when the
  back-end is updated, can run the update script or whatever needs to
  be done.
	Or maybe just set another cookie with the version, and check
  that in common.inc.
- Differences between various versions:
  * Article title links
	- Desktop: regular <a>. Middle-click to open in new tab
	- iPhone/iPad, in Safari: open in new window
	- iPhone/iPad, standalone: Open in an iframe or something.
	  Don't launch Safari.
  * manifest:
	- Desktop: don't include. Or not yet
	- iPhone: include iPhone-specific files
	- iPad: include iPad-specific files
- In the mobile app manifest, is the network whitelist really
  mandatory? Does it take relative URLs? If not, then add this to the
  INSTALL instructions. Either that, or generate the manifest during
  installation.
- Mobile app: is it possible to interrupt an update?
	swapCache() updates the cache (switches to the most recent
  application cache). However, it doesn't reload resources from the
  new cache.
	I don't think it's possible to abort an update. But it's at
  least possible to show a progress bar. When app changes, cache
  status goes from CHECKING to DOWNLOADING (multiple times), and
  finally UPDATEREADY (or, presumably, NOUPDATE or IDLE).
- For 'update', since the animation is pretty, could have a
  "multi-line JSON" output format. Is it worth defining another output
  type for this ("jsonm"?)? Or should the client just assume that if
  the text has newlines in it, that it's a series of updates?
	Probably the former: it'd be nice to know whether to use a
  XMLHttpRequest object that needs to follow state 3 or not.
- Which database fields have limited size? HTMLPurify them before
  displaying.
	* Feed title (assume it's text)
	* Feed subtitle (assume it's text)
	- (Feed nickname)
	- (Site URL)
	- (Feed URL)
	* Feed description
	- (URL to feed image)
	- (Item URL)
	- Item title
	- Item summary
	- Item content
	- Item author
	- (Item category)
	- (Item content URL)
	- (Item comment RSS URL)
	- (Item GUID)
  Hack to see what I've missed: have HTMLpurify put a distinctive
  marker around the purified parts, like "foo" => "@[foo]@".
- What does HTMLPurifier remove?
	- dKos talk threads (<ul>?)
	- "About" section in Strange Maps
	  It's too long for the database, so the end gets truncated,
	  along with various close-tags.
	  Quick hack: invoke clean-html when displaying, rather than
	  when updating.
- Functions and scripts that take a feed ID should also take a group.
  In particular, "all" should be considered a group, not a special
  feed ID (though it can be considered a special group).
- Add "$Rev$" or something to some file, so we can tell which revision
  we should be at. Compare this to the database, and see if we need to
  upgrade.
- Add hook for links to mobile versions of URLs (view.php).
	Probably should add a subdirectory underneath "plugins".
- For error messages, and any other time when the app needs to talk to
  the user: could create a synthetic feed. This could include error
  messages from update.php, warnings that a feed has been redirected
  (perhaps including a link to update the feed config), and anything
  else.
	Could perhaps use "internal:" as the URL for these feeds.
- CSS multicolumn stuff:
  See http://www.zenelements.com/blog/css3-multiple-columns/
  Fixed width:
  .multicol {
  /*	outline:		1px solid red;*/
  /*	text-align:		justify;*/
	-moz-column-width:	15em;
	-webkit-column-width:	15em;
	-moz-column-gap:	2em;
	-webkit-column-gap:	2em;
  }

  Fixed number of columns:
  #my_CSS3_id {
  text-align: justify;
  -moz-column-count: 3;
  -moz-column-gap: 1.5em;
  -moz-column-rule: 1px solid #c4c8cc;
  -webkit-column-count: 3;
  -webkit-column-gap: 1.5em;
  -webkit-column-rule: 1px solid #c4c8cc;
  }
- AJAX requests can be blocked due to authentication. Should return a
  status code of some sort, and allow the user to log in. How?
- Worker threads could be useful. However, iPad doesn't seem to
  support them.
	One way to handle this might to have synthetic events: with
  worker threads, the worker generates an event when new data is
  available, which calls a handler in the main thread.
	In Mobile Safari (iPhone/iPad), we can have the
  data-manipulation code generate synthetic events similar to the ones
  the worker thread would. That would allow fewer differences between
  threaded and non-threaded code.
	See
  http://www.davidflanagan.com/javascript5/display.php?n=17-8&f=17/DataEvent.js
- Could build an object to coordinate asynchronous activities:
	var checkpoint = new waitForIt(cont_func, arg1, arg2, ...);
	checkpoint.waitFor("this");
	checkpoint.waitFor("that");
	checkpoint.waitFor("theother");
  says that once "this", "that", and "theother" have completed, it
  should execute cont_func(arg1, arg2, ...).
	Then start the various asynchronous activities, like loading
  modules. When it's done, each one calls
	checkpoint.doneWith("this");
	checkpoint.doneWith("that");
	checkpoint.doneWith("theother");
  and once they've all checked in, checkpoint runs cont_func().
- Maybe just give up on maintaining ChangeLog. Just use ChangeLog.git
  to get this year's changes.
	Should also have a NEWS file with changes users might care
  about.
- Feed maintenance: feeds go stale, get deleted, etc. all the time.
  It'd be really nice if the index page showed the ones with errors.
	Check the HTTP status: if it's 4xx, then the feed is dead.
- Guideline: Apple recommends using 'delete' to free up memory and
  help the garbage collector. Basically, any time you have
	var my_foo = new Foo;
  write
	delete my_foo;
  wherever you're done with it.
	Also, use 'var', to make variables local (so they can be
  destroyed when they go out of scope).
- High Performance JS book:
  - Move <script> tags to the bottom of <body>: loading scripts blocks,
    so this at least shows HTML to the user while the JS loads.
  - Use <script defer> when possible.
	What qualifies as "not modifying the DOM"?
  - Loading JS-specific CSS, and loading additional scripts from JS: p.7
	<script type="text/javascript">
	var stylesheet = document.createElement("link");
	stylesheet.rel = "stylesheet";
	stylesheet.type = "text/css";
	stylesheet.media = "all";
	stylesheet.href="skins/{$skin}/style-js.css";
	document.getElementsByTagName("head")[0].appendChild(stylesheet);
	</script>
    This can be put at the end.
  - Profiling and debugging should be per-page options. These can be
    turned on on a per-page basis or something, and the requisite
    scripts loaded dynamically, to speed things up in the normal case
    (pp. 7-9).
  - If JS gets complicated, could use an Emacs-like autoload scheme:
    define an array of functions such that, if they're ever called,
    load the requisite JS script, then call the original function.
	Can use the same introspection techniques as the profiler.
  - Building HTML with innerHTML is faster on all browsers except
    WebKit, though the difference is far less significant than it used
    to be.
  - cloneNode method. Is this useful at all?
  - The getElementsBy*() functions return collections. Accessing them
    is expensive, because they're live. This includes getting the
    length. So intead of
	for (i = 0; i < collection.length; i++)
    use
	for (i = 0, len = collection.length; i < len; i++
  - Repaints/reflows are expensive, but necessary for
    collapsing/expanding articles.
	Is it worth getting the height and Y-offset of each <div item>
    in an onload callback, and caching the value in case the user
    wants to collapse/expand something?
	Use onload, since that's when all the images will have loaded,
    and we know what the final look of the page is.
  - Worker threads can be used for long-running functions without
    affecting the UI: they spawn off a second thread and do stuff
    there. However, they can't touch the DOM, and can only communicate
    with the main thread through callbacks. See
    https://developer.mozilla.org/en/Using_web_workers
  - Set the expiration time on pages, so that they get cached. By
    convention, caching for slightly less than a year means forever.
    But also want to pick up new versions. A week, maybe?
- Articles with only content, no summary, should also be collapsible.
	Set the max. height
- Does it make sense to have 'onclick="javascript:foo"'? Or can we
  just have 'onclick="foo"'?
- Use addEventListener() instead of on*=script
- Bookmarklet to mark an article as read.
	If I stumble across, say, a Bad Astronomy article in Twitter,
  I don't want to read it again in the normal feed. It'd be nice to
  mark it as read.
	There's a stub function in database.inc: db_mark_url(), which
  marks items as read that have a given URL.
	One potential problem: what if I find out about a new post
  from Twitter, before NewsBite has refreshed the feed? Then there
  will be no item in the database with the given URL.
	Perhaps the way to get around this is, if the post URL isn't
  already in the database, add it to a list in another table. The next
  time feeds are updated, check the list again, and remove them.
	Problem is, what if the sequence is:
	1) Mark http://pharyngula.org/some-post as read
	2) No such post found; add it to the check-later list
	3) User updates Bad Astronomy feed
	4) Check the list again; http://pharyngula.org/some-post still
  doesn't exist in the database.
- Search function: find words in feeds, titles, articles, etc.
- Create full-text index on summary, content. Perhaps title.
	CREATE FULLTEXT INDEX tbl_index ON tbl (col, col...);
- Read this to make iPhone-friendly skins:
  http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariWebContent/OptimizingforSafarioniPhone/OptimizingforSafarioniPhone.html
- Make updates smarter about updating when no network available.
  On iPhone, don't contact the network if there's no network to contact.
- Ads: perhaps should generalize: look for
  <a href="$some_ad_url">...</a>, optionally wrapped in <p>...</p>.
- WaPo duplicates: "Today's Highlights" can duplicate stories from
  other feeds. Would be nice to detect these and delete duplicates.
	Ditto for Google news
	it might be useful to define a cluster of feeds: "WaPo
  Highlights", "WaPo International", and "WaPo Top Stories" could be
  grouped together, and duplicate items removed.
	Sometimes the URLs are different (e.g., WaPo or NYT use an
  "&src=" or "#foo" parameter to say which feed the user came from).
  Need a way to normalize URLs.
	Perhaps the best way to do this is to just allow the user to
  define arbitrary groups, then attach properties/plugins/hooks to
  groups, as well as to individual feeds.
- Sorting by many criteria
	It'd be nice to sort all of the items by many criteria, e.g.,
  comics come before news; comics are shown oldest-first, while news
  items are shown newest-first; dKos articles by Hunter percolate to
  the top; etc.
	This is probably too hard to sort in MySQL, so presumably need
  to do it in PHP. However, don't want to sort a massive data set on
  the fly.
	Might be possible to pre-sort in a cron job. But to avoid
  sorting a massive data set, would it be possible to use some variant
  of quicksort to first sort by time, then sort by "comics go before
  news", etc.?
- Might be useful to add gestures, for portable devices. See
  http://depts.washington.edu/aimgroup/proj/dollar/
	On the N810, one can scroll the display by drawing on it. So
  adding gesture recognition is likely to play havoc with that. Ditto
  iPhone/iPad.
	Perhaps hard-code straight-line templates, and implement
  scrolling manually. (Swipe, on iPhone/iPad.)
	That implementation is rotation-independent: "v" can be
  drawn as ">" and still be recognized as "v". To fix this, can divide
  space into quadrants (or octants) centered on centroid, and classify
  shapes based on where the starting point is WRT the starting point.
  This way, "v" would have the starting point in the NW quadrant,
  while ">" would have it in the SW quadrant, so they'd be seen as
  different.
	This is particularly important because it would be desirable
  to have straight lines at different angles (e.g., stroke up to go to
  previous article, stroke down to go to next article), while the $1
  gesture algorithm would see those as the same shape.
	To have straight lines, it would be necessary to add the hacks
  they suuggest in the paper: check to see whether one of the
  dimensions is "too small".
	The distance calculation has a square root. This seems
  expensive and unnecessary, since we're only trying to find the
  closest match. Might save some CPU cycles.
	Which gestures would we want?
	- Go to previous article
	- Go to next article
	- Mark as read and move to next article
	- Mark as unread?
	- Refresh list of articles
- Need tool to fix database schema.
	ALTER TABLE items CHANGE COLUMN url url VARCHAR(255);
	ALTER TABLE items CHANGE COLUMN comment_url comment_url VARCHAR(255);
	ALTER TABLE items CHANGE COLUMN comment_rss comment_rss VARCHAR(255);
- Should be able to read both read and unread articles.
- Would be nice to have either "new" flag or a "saved for later" flag.
  The latter is probably more useful. Similar to (Mobile?) Safari's
  "Reading List" feature.
	That way, can go through today's stuff fairly quickly, without
  having to scroll through messages you've already seen.
	Perhaps make this a pseudo-feed (for which need support for
  pseudo-feeds). Add a "star INT" field to the database, perhaps?
  Don't display starred items in normal view. Having "star" be an int
  allows defining multiple star types (to mark articles in different
  ways).
- Should there be a module (or something) for Twitter updates?
- There should really be a tool for testing plugins.
	For removing ads and such: it'd be nice to plug the XML or the
  article into a temp file, and 
- Should there be an external log file, for debugging and whatnot?
	It'd also be nice to add a pile of monitoring, to be able to
  see what happens when, to optimize properly.
	Perhaps use syslog? I think it's a core function in PHP.
- Makefile:
	Run tests:
		Try to call various functions and make sure they return
		correct results
		php-cgi -c php.ini <script>
- Documentation for how the plugins for feed.inc work.
	Texinfo? Add code to Makefile to generate HTML documentation.
- More fine-grained function to select items from a feed:
	- One feed, or all feeds
	- Time range: e.g., the last 24 hours
	- Order: oldest to youngest/youngest to oldest
	- How many articles to get
- Passwords probably shouldn't be stored in database. As first pass,
  try removing them from the database. Put them in another file, and
  add functions to read and write passwords.
	Plus, it's possible that at some point it'll become
  necessary/desirable to use authentication methods other than
  username/password, possibly involving certificate exchange or
  something.
	We already have a server-side secret string. Could encrypt
  feed passwords with that string.
- Should be able to specify password for all of livejournal.com, not
  have to specify it separately for every LJ feed.
	Use parse_url() to get hostname.
	LJ friends feeds in OPML format:
  http://www.livejournal.com/tools/opml.bml?user=arensb
- SQL schema should support folders, i.e., user can group feeds into
  categories. By default, all feeds go in a " root" folder (the
  leading space marks this as special; strip space from user-defined
  folders).
	Folders can contain subfolders, and so on. Add a table saying
  which feeds and folders belong to which other folders, much like
  /etc/group. That way, a feed can be in multiple groups. (Though will
  need to make sure to avoid loops, e.g., groups containing themselves
  (perhaps indirectly), or at least avoiding infinite
  loops/recursion.)
	Need a function to figure out the reverse: given a group,
  figure out which feeds are in it (is this worth caching?).
	AFS's pts uses negative UIDs to represent groups. Perhaps the
  same can be done here, in the table that says which feeds/groups are
  in which groups.
- Ajax: user should also be able to drag feeds around, so they're
  listed in arbitrary order. Need an "nth" field somewhere, giving the
  numeric order in which the feed is listed.
	Ideally, it should be possible to have a feed in multiple
  folders (e.g., Pharyngula goes in both "Science" and "Atheism", or
  Daily Kos goes in both "Politics" and "Stuff I Read Daily"), so need
  a separate entry (and nth field) for each instance. And each user.
- LiveJournal plugin (or something): would be nice to be able to say
  "I'm user So-and-so at LiveJournal" (or other site using the LJ
  code) and have it automatically subscribe to your friends feeds
  there.
	Need to somehow keep track of the fact that these feeds were
  auto-generated. If I change my password on LiveJournal, I should
  only have to change it once (in the LJ plugin config) and have the
  engine figure out that the password for all the LJ-friends feeds has
  changed as well.
- Multi-user support: this would be nice. It would also be nice if the
  back-end could avoid duplicating information, i.e., not store two
  records for the same article.
	However, for now, there is enough user-specific information in
  the schema for both feeds and items that this isn't practical. Start
  out with naive implementation, and see if anyone starts using it on
  a multi-user system.
- Killfile: automatically mark as read messages that match certain
  criteria.
	Perhaps this should have a scoring system or something: I'd
  like to killfile the stories on dKos that match /\w\w-\d\d/ (because
  those talk about specific senate/house races that I generally don't
  care about), but show the ones that match /MD-\d\d/, since I do care
  about those. Or kill the "diary rescue" threads, unless they contain
  "arensb".
	Should probably be done in plugin.
- Smart groups: like iTunes smart playlists, or killfiles (above):
  automatically populate a group based on user-specified criteria.
	In fact, ordinary feeds could be implemented with this
  mechanism: the ordinary dKos article list could simply be the set of
  all articles that come from the dKos feed.
- Don't want to automatically display a feed's image: some are good
  (like LJ icons), others are annoying, like FeedBurner feeds that
  just have a "Feed powered by FeedBurner" image.
	Make this a per-feed customizable option.
- Provide hooks for various plugins to do their thing.
	- After adding or updating a feed in the database. Perhaps to
	  add fields to a custom table.
		Could use this to automatically delete subscription to
	  feeds that haven't been updated in a while, e.g., comment
	  threads.
	- After adding or updating an item in the database. Perhaps to
	  add fields to a custom table.
	- Mark items as read as they come in, based on subject or
	  category or whatever.
	- Before marking an item as read.
	- Before deleting an item in the database. Perhaps to clean up
	  custom tables.
	- Before deleting a feed in the database. Perhaps to clean up
	  custom tables.
- i18n.
	Can start by identifying translatable strings and marking
  them, so they can be translated later. Define dummy _() and N_()
  functions.
	Can't trust things like $LANG and $LC_* to decide which
  language to translate to. Probably ought to try to guess from
  browser settings. Failing that, use a cookie or an option in the
  database.
- Browser IDs:
  Wii browser:
  Opera/9.30 (Nintendo Wii; U; ; 3642; en)

  iPad browser:
  Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B367 Safari/531.21.10
- One possible way of displaying a feed might be to have a small frame
  at the top, like Google Image results, with a brief identification
  of the item, and navigation arrows to go to the {previous,next}
  {item,feed}. The bottom frame shows the original article.
- MediaWiki plugin: if you subscribe to the "recent changes" page on a
  MediaWiki wiki, there should be buttons at the bottom that allow you
  to either mark the change as patrolled, or revert it.
	Unfortunately, this doesn't seem possible.
- Ajax: keybindings for articles:
	'm'	(more) when viewing preview, show full article
		If feed doesn't have a content section, or if already
		displaying the content, browse to the full article.
	'j'	move to next item (vi key)
	'k'	move to previous item (vi key)
	'd'	mark item as read, and skip to next item
	'u'	mark item as unread, and skip to next item
- LiveJournal plugin should look at the <description> and parse lj
  tags in the body of the item. E.g., expand '<lj:user="foo">' into
  proper HTML.
	Apparently <lj-embed id="<int>" /> indicates an embedded item.
	Some known tags:
  <lj:journal>
  <lj:journalid>
  <lj:journaltype>
  <lj:mood>
  <lj:music>
  <lj:poster>
  <lj:posterid>
  <lj:reply-count>
  <lj:security>
- Per-feed options:
	- Whether to display oldest-first by default (good for comics)
	  or newest-first (good for news).
- Page to set global and per-feed options.
- Icons for common actions:
	- Refresh (feed, all feeds)
	- Mark as read
  See http://commons.wikimedia.org/wiki/Category:Silk_feed_icons
- How do skins, templates, scripts, and HTML files interact?
	If a skin wants to link to, say, an "about.html" file that
  gives the author's name, where should the "about.html" file go?
	If a skin uses frames, and therefore requires an HTML file for
  each frame, where do those go?
	What about ancillary files like JavaScript scripts and CSS
  files?
	A skin should come in one directory, for ease of installation
  and removal. Should it be
	myskin/html
	myskin/templates
  OTOH, this means that the skin can't easily contain private elements
  like PHP include files, since those are (preferably) in a separate,
  directory, not visible by the web client.
	Can probably initialize a template as a chunk of DOM, with
  quick links to the interesting bits inside, then use cloneNode() to
  instantiate it.
- Should it be possible to have different skins for different feeds?
  E.g., for the Onion, just seeing the headlines (sometimes summaries)
  is sufficient. For This Modern World, might want a strip-frame at
  the top, and the original site underneath.
- Might be nice to have "lightweight skins": the default skin is
  reasonably modular: there's a template for viewing a list of items,
  which in turn uses a template to display a single item.
	A lightweight skin could default to view.tpl for displaying a
  list of items, and only provide a custom item.tpl for displaying the
  item itself.
	For that matter, there could be a per-feed option to specify
  the skin to use for that feed's items, and view.tpl could select
  whichever skin is used for that particular feed.
- Perhaps should separate colors and fonts into a separate stylesheet:
  that way, can easily change the color scheme, perhaps even using an
  autogenerated stylesheet.
	Perhaps can call this "outfit": modifies appearance by going
  over the skin, and is easy to change.
	Perhaps split CSS into "appearance.css", for colors, images,
  backgrounds, etc; and "layout.css" for everything else.
- RSS doesn't provide content by default, just a summary
  (<description>). Perhaps add a hook after processing <item>, such
  that if there's a <description> but no <content:encoded> or such,
  then move the description to content.
- Keep statistics: keep track of which feeds/groups user reads, how
  often, etc.
	Keep track of how often a feed is updated. Perhaps can have
  rarely-updated feeds percolate to the top.
- Skin for comics that don't include the image in the feed: add an
  <iframe> or something in the view template, that shows the original
  page. Perhaps scroll to a position where the image is visible.
	For gocomics.com, can scroll to <div id="comicTools">.
  Probably sufficient.
	Unfortunately, cross-site permissions don't seem to allow
  manipulating the contents of an <iframe>, not even to scroll the
  window around. But can have
	<iframe src="http://some/url#some-anchor"></iframe>
  where "some-anchor" is an ID or anchor.
	gocomics.com "#comicTools".
	This Modern World: "#post_items".
	I Drew This: no good anchors.
	Jesus and Mo: "#comic"
	Russell's Teapot: no good anchors.
	Zero Punctuation: ?
	The Pain: no good anchors
	Perry Bible Fellowship: "#topimg"
	User Friendly: no good anchors
- Try to make a "collapsed" view for long articles that don't have a
  summary: clip to 10em or something.
- A bunch of elements in the templates have id="..." identifiers
  (body, forms, etc.) Come up with a good naming scheme for them, to
  keep them all straight.
- The example in TFM for php_sapi_name() is useful for determining
  whether the script is being called from the command line or as a CGI
  script.
	This, in turn, can be used to implement dual-mode commands. In
  particular, 'update.php' can be called from cron to update every
  hour (or whatever).
- "Today's feeds" could use multiple criteria to come up with
  partially-ordered set: say there are a bunch of unread news stories,
  several unread User Friendly strips, and today's weather report.
	The user could decree that User Friendly should be presented
  in chronological order (i.e., when comparing two User Friendly
  articles, the older one goes on top; when comparing a User Friendly
  article and anything else, the order is undefined).
	The news stories, OTOH, should be presented in reverse
  chronological order (i.e., the newer of two news stories goes on
  top).
	And today's weather report is important, but yesterday's is
  garbage: today's weather report goes above anything else, but
  anything older than the latest one goes at the bottom.
	We can multiply such rules ad infinitum (perhaps look at how
  often a feed is updated, so busy sites don't crowd out the ones that
  update rarely). The idea is, these rules can define a
  partially-ordered set. It would be cool to use these to determine
  the order in which to display articles.
- Rethink how markitems.php works, which arguments it takes. Check
  whichever template calls it (view.tpl and item.tpl?).
	The easiest, no-JavaScript case is probably the way FoF does
  it: if we're displaying unread items, give the option of marking
  items as read. If we're displaying all items, give the option of
  marking items as unread.
	Perhaps do this by adding a hidden "new_state" input field to
  the form (and of course update markitems.php to check for it).
	With JavaScript, we can toggle the state of each item as the
  user requests.
- There are a bunch of times when it's handy to parse XML files:
  reading RSS feeds, importing OPML, parsing HTML pages to find the
  feeds, etc.
	Would it be helpful to have a generic function that parses any
  kind of HTML/XML/XHTML file into a data structure? That could make
  it simpler to switch from one back-end XML parser to another, if
  desired.
- There are Mozilla- and Safari-specific bits in the CSS files. Is it
  worth adding yet another CSS file, for browser-specific CSS?
	Might be worth it: IE doesn't appear to support rounded
  borders, so the left and right padding on Firefox and Safari makes
  it look weird.
- For nonstandard HTML attributes like which="collapsed", should
  probably use xmlns:nb="..." and nb:which="collapsed", just to try to
  be standards-compliant.
- Name: in "2001", Clarke described a tablet PC that served as a
  customized newspaper. Did he give it a name?
	Yes: Newspad
- How should items.pub_time and items.last_update work together?
	The intent is that if an article is first written on Jan. 1,
  then updated on Jan. 5, then it'll show up at the top of "today's
  news" on Jan. 5 (assuming it's still unread).
	There are several complicating factors:
	- Some feeds don't include publishing or update times.
	- Some feeds lie and give the current time for every item.
	  (examples?)
- LJ feeds give the same URL for "read more" and comments. Does it
  make sense to combine the two in item.tpl?
- Ought to support categories. WaPo feeds, in particular, have lots of
  them.
	Presumably should add another table, with {item-id, scheme,
  category} tuples. The scheme is for particular setups (like the
  "media:" RSS extension, or Slashdot's categories). That way, can
  show all posts in a given {scheme, category}, or all posts in a
  given {category}.
	Can also create category cloud, to see which keywords are most
  active ATM.
- INSTALL: say to make backup of: db, .htaccess, config.inc.
- Perhaps should have something in the database (in global options?)
  that gives the version number of the database schema. That way, can
  detect whether database is out of date wrt PHP scripts.
	Another possibility would be to add an 'upgrade.php' script to
  the distro: 'common.inc' includes that, upgrades the installation,
  then deletes itself.
	In order to be allowed to delete itself, the script should be
  put in a directory that the httpd user can write to. Yes, this is a
  hack.
- Run timing tests with different numbers of feeds. See if there's a
  way to estimate a good number of parallel connections.
	If there is, allow user to set $PARALLEL_UPDATES to "auto",
  and have it be computed automatically.
- How should abort() deal with JSON/XML/whatever non-HTML output?
- Perhaps class Skin can try to be a singleton: that way, if multiple
  files call 'new Skin', they'll both refer to the same object. OTOH,
  that should never happen.
- Perhaps expand the notion of "feed": could show email, current
  weather conditions, Nagios alerts, etc.
- Make things prettier:
	- Background image
	- Perhaps translucent elements/backgrounds
	- Button bars with gradient backgrounds
- Possible backgrounds at http://www.imageabstraction.com/
- Icon for iPhone: see
  http://developer.apple.com/safari/library/documentation/InternetWeb/Conceptual/iPhoneWebAppHIG/MetricsLayout/MetricsLayout.html#//apple_ref/doc/uid/TP40007900-CH6-SW31
  http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html
	Should be 57x57 pixel PNG file, with square corners.
	Add
  <link rel="apple-touch-icon" href="my-app-icon.png"/>
  to <head> section of web app. This way, when user puts the app on
  the iPhone desktop, its icon will be the PNG file instead of a
  screenshot of the page.
	There are designated filenames: "apple-touch-icon.png" is, I
  think, the default if the <link> item is omitted.
  "apple-touch-icon-precomposed.png" means that the iPod shouldn't add
  effects (the light-from-above, reflection thingy).
- iPhone standalone app: when the site is saved to a desktop icon,
  iPhone OS packages the app up as a standalone. There are several
  useful tags and whatnot for this. The following tags work when the
  app is saved to the desktop, then started from there (like an
  ordinary app):
	Splash screen:
  <link rel="apple-touch-startup-image" href="startup.png"/>
	Say that the app is standalone:
  <meta name="apple-mobile-web-app-capable" content="yes" />
	This gets rid of the Safari URL bar and navigation buttons at
  the bottom.
	Status bar appearance:
  <meta name="apple-mobile-web-app-status-bar-style" content="black" />
  Can set to "default", "black", or "black-translucent".
	I think this only works on full-on mobile apps, though.
- HTML5 database:
	http://www.w3.org/TR/IndexedDB/
  However, this isn't currently supported on any browser that I care about.
  (Thu Jul  7 18:24:36 2011)
	Looks like Firefox 12 has it (Sun May  6 10:16:11 2012)
- Mobile Safari (and presumably other mobile browsers) allows looking
  up the current location using GPS or whatever. This means that it
  should, in principle, be possible to have location-based profiles.
  For instance, when reading news at work, don't include webcomics;
  when reading at home, don't include work-related feeds.
- CSS allows the device to decide whether it considers itself a
  handheld device:
  http://www.boutell.com/newfaq/creating/iphone.html
	@media handheld {
	  .navigation {
	    display: none;
	  }
	}
  More at http://www.w3.org/TR/CSS2/media.html

  Apparently currently (May 2010) neither iPod Touch nor iPad consider
  themselves handheld devices. Go figure.
	Sep 2012: 
  http://stackoverflow.com/questions/3893342/do-iphone-android-browsers-support-css-media-handheld

  says that Apple chose not to implement "@media handheld", since the
  iPhone can display things on a par with desktop browsers. Presumably
  Android ignores it as well for similar reasons.
	That page recommends using
  <link rel="stylesheet" type="text/css" media="screen and (max-device-width: 480px) and (resolution: 163dpi)" href="shetland.css" />
  which does seem a reasonable approach, especially given the wide
  variety of device sizes.
- CSS: replace -webkit-box-shadow with box-shadow
  once enough browsers support it.
	Only Android browser doesn't support it.
- CSS media queries described at
  http://www.w3.org/TR/2002/CR-css3-mediaqueries-20020708/
- CSS3 supports "target" attributes for opening links in new
  windows/tabs:
  http://www.w3.org/TR/css3-hyperlinks/
	target-name:		new;
	target-new:		window !important;
	target-position:	above;
  But none of the browsers I currently use support this.
- Might be fun to set a background that changes over the course of a
  day.
- Add a customized error page for when can't authenticate?
	ErrorDocument /path/to/page.html
  in .htaccess
# Local Variables:
# fill-prefix: "  "
# mode: auto-fill
# End:
