- Add hook for links to mobile versions of URLs (view.php).
	Probably should add a subdirectory underneath "plugins".
- Bug?: There are some old articles in the database. Why aren't they
  being cleaned out properly?
	db_update_feed() only cleans out whichever feed it was called
  with. There's nothing to clean out all feeds, including inactive
  ones.
	Arguably this isn't that much of a problem with inactive
  feeds, since the number of articles won't grow.
	But some active feeds aren't being cleaned out either.
  Apparently this is because the URLs are dead.
- Bug: in cron mode, update.php should print an error to stderr if
  something goes wrong.
	- Can't fetch feed (error 404)
	- Get non-RSS feed
	- Other
- Bug: When Ajax updates feeds, it doesn't notice updates to the list
  of feeds.
	Perhaps when updating all, update.php should append a list of
  known feeds. If it's out of date, JS can request a full list.
- Bug: When updates take too long, PHP terminates. 30 sec. max.
	This is a curl error, and should be caught. Error at
                $err = curl_multi_select($mh);
  This doesn't seem to be a simple case of an operation exceeding a
  timeout.
- Bug: when collapse from bottom collapse bar, window scrolls uglily.
  Ought to fix this: bottom edge should remain at the same place on
  screen, if possible.
- Bug-ish: when marking a feed as inactive, get redirected back to it.
  This is bogus.
	Redirect to feed index.
- AJAX requests can be blocked due to authentication. Should return a
  status code of some sort, and allow the user to log in. How?
- It'd be nice to compress files in advance. Have Apache figure out
  that if the user is asking for "foo.css", and the browser accepts
  gzipped compression, and "foo.css.gz" exists, then just return that.
- Figure out DOM::Storage interface
	Need a way to store feeds, items in a way that can be
  retrieved.
	Write a module for this.
	Unfortunately, storage is just a hash mapping strings to
  strings. So need to build structure on top of that.
	Need a way to serialize/unserialize strings. Perhaps rewrite
  jsonify() in JS.
	"typeof" operator might be useful.
  See
	https://developer.mozilla.org/en/storage
	http://developer.apple.com/safari/library/documentation/iphone/conceptual/safarijsdatabaseguide/usingthejavascriptdatabase/usingthejavascriptdatabase.html
  (for database storage in Safari)

  |          | sessionStorage | localStorage | database | JSON |
  | FF 3.5   | Yes            | Yes          | No       | Yes  |
  | FF 3.6   | Yes            | Yes          | No       | Yes  |
  | iPod     | Yes            | Yes          | Yes      | Yes  |
  | Safari 5 | Yes            | Yes          | No?      | Yes  |
- Worker threads could be useful. However, iPad doesn't seem to
  support them.
- Since all the browsers I care about seem to have the JSON object,
  use JSON.parse("...") instead of eval("...").
- Could build an object to coordinate asynchronous activities:
	var checkpoint = new waitForIt(cont_func, arg1, arg2, ...);
	checkpoint.waitFor("this");
	checkpoint.waitFor("that");
	checkpoint.waitFor("theother");
  says that once "this", "that", and "theother" have completed, it
  should execute cont_func(arg1, arg2, ...).
	Then start the various asynchronous activities, like loading
  modules. When it's done, each one calls
	checkpoint.doneWith("this");
	checkpoint.doneWith("that");
	checkpoint.doneWith("theother");
  and once they've all checked in, checkpoint runs cont_func().
- It'd be nice if PLUGIN_DIR could optionally be an array.
  Unfortunately, PHP constants have to be scalars.
- Maybe just give up on maintaining ChangeLog. Just use 'svn log -r
  head:1' in Makefile. Or 'svn log -r "head:{2010-01-01}"' to get this
  year's changes.
	Should also have a NEWS file with changes users might care
  about.
- On iPod/iPad, perhaps item titles should open in a new window.
- When an RSS URL gets redirected, this should cause a visible warning.
- Washington Post World feed starts with
	<?xml version="1.0" encoding="iso-8859-1"?>
  But content is really UTF-8. Can this be fixed in a hook? Can this
  be a hook to the XML parser, or do we need to fix the text of the
  feed before passing it along to be parsed?
	Probably the latter. There's an
  xml_set_processing_instruction_handler(), but presumably it gets
  called only after the PI has been read.
- Break up main index page into sections:
	Active, non-stale feeds
	Active stale feeds
	Inactive feeds
- update_feed (net.inc) is inconsistent in its return value.
	Presumably in case of error should return a tuple giving the
  error status and an error message.
- Feed maintenance: feeds go stale, get deleted, etc. all the time.
  It'd be really nice if the index page showed the ones with errors.
	Check the HTTP status: if it's 4xx, then the feed is dead.
- Get rid of unused skins: default, fancy2.
	Make "fancy" the new default. Maybe just rename it to
  "default".
- Do I really need Smarty? I'm not sure it's doing anything it
  wouldn't be just as easy to do in PHP.
- High Performance JS book:
  - Move <script> tags to the bottom of <body>: loading scripts blocks,
    so this at least shows HTML to the user while the JS loads.
  - Use <script defer> when possible.
	What qualifies as "not modifying the DOM"?
  - Loading JS-specific CSS, and loading additional scripts from JS: p.7
	<script type="text/javascript">
	var stylesheet = document.createElement("link");
	stylesheet.rel = "stylesheet";
	stylesheet.type = "text/css";
	stylesheet.media = "all";
	stylesheet.href="skins/{$skin}/style-js.css";
	document.getElementsByTagName("head")[0].appendChild(stylesheet);
	</script>
    This can be put at the end.
  - Profiling and debugging should be per-page options. These can be
    turned on on a per-page basis or something, and the requisite
    scripts loaded dynamically, to speed things up in the normal case
    (pp. 7-9).
  - If JS gets complicated, could use an Emacs-like autoload scheme:
    define an array of functions such that, if they're ever called,
    load the requisite JS script, then call the original function.
	Can use the same introspection techniques as the profiler.
  - Building HTML with innerHTML is faster on all browsers except
    WebKit, though the difference is far less significant than it used
    to be.
  - cloneNode method. Is this useful at all?
  - The getElementsBy*() functions return collections. Accessing them
    is expensive, because they're live. This includes getting the
    length. So intead of
	for (i = 0; i < collection.length; i++)
    use
	for (i = 0, len = collection.length; i < len; i++
  - Repaints/reflows are expensive, but necessary for
    collapsing/expanding articles.
	Is it worth getting the height and Y-offset of each <div item>
    in an onload callback, and caching the value in case the user
    wants to collapse/expand something?
	Use onload, since that's when all the images will have loaded,
    and we know what the final look of the page is.
  - Worker threads can be used for long-running functions without
    affecting the UI: they spawn off a second thread and do stuff
    there. However, they can't touch the DOM, and can only communicate
    with the main thread through callbacks. See
    https://developer.mozilla.org/en/Using_web_workers
  - Suggests using cpp on JS. This allows using cpp macros and #ifdef
    DEBUG. Downside is need to remember to 'make' before running.
  - Compress files with gz, mod_deflate. Should work well on HTML, JS,
    CPP. But not images, obviously.
  - Set the expiration time on pages, so that they get cached. By
    convention, caching for slightly less than a year means forever.
    But also want to pick up new versions. A week, maybe?
- Can Rhino be used to check JS syntax and whatnot?
  https://developer.mozilla.org/en/Rhino
	What about profiling?
- Firefox 2 (carrot) doesn't have getElementsByClassName.
	Do I care? Maybe a bit.
- Is it really worth keeping JS-specific stylesheets?
- Is there a way to tell Smarty to build all the relevant compiled
  templates in 'make'?
	Presumably a command-line PHP script can do this:
	foreach skin
		foreach *.tpl
			Smarty->compile($skin/$file) or something
- Try compressing JS/CSS/etc. to save bandwidth
  - Figure out how to do this with Apache
  - 'make install' needs to compress files
- Perhaps get a JavaScript compacter: utility to remove blanks,
  comments, etc. from files.
- How does AIG add a custom font?
  (Only shows up in Safari for me.)
  http://blogs.answersingenesis.org/blogs/ken-ham/2010/05/18/is-groupon-anti-christian/
- Articles with only content, no summary, should also be collapsible.
	Set the max. height
- Add a status box that pops down from the top to give important
  information, like when you've lost network connectivity and whatnot.
- Use addEventListener() instead of on*=script
- Use addEventListener("DOMContentLoaded"...) instead of "onload".
- It might be interesting to move the "mark as read" buttons to the
  left when reading left-handed. That is, if you turn the iPad
  upside-down, the "mark as read" button flips to the left side.
	window.onorientationchange = orientation_change;

	function orientation_change()
	{
		box.innerHTML = "Orientation: " + window.orientation;
	}

  Position of the hardware button at various values of window.orientation:
  0:	bottom
  90:	right
  180:	top
  -90:	left
	It might be useful to have the buttons on the left at one of
  90 or -90 as well. Play around with this and see how it works.
	While we're at it, in landscape mode it would be good to have
  a list of other items in the feed in a box on the left.
- The various .js and .css files are getting large enough to be
  unmanageable. Break them up into chunks and build them with m4 or
  something.
- Bookmarklet to mark an article as read.
	If I stumble across, say, a Bad Astronomy article in Twitter,
  I don't want to read it again in the normal feed. It'd be nice to
  mark it as read.
	There's a stub function in database.inc: db_mark_url(), which
  marks items as read that have a given URL.
	One potential problem: what if I find out about a new post
  from Twitter, before NewsBite has refreshed the feed? Then there
  will be no item in the database with the given URL.
	Perhaps the way to get around this is, if the post URL isn't
  already in the database, add it to a list in another table. The next
  time feeds are updated, check the list again, and remove them.
	Problem is, what if the sequence is:
	1) Mark http://pharyngula.org/some-post as read
	2) No such post found; add it to the check-later list
	3) User updates Bad Astronomy feed
	4) Check the list again; http://pharyngula.org/some-post still
  doesn't exist in the database.
- Search function: find words in feeds, titles, articles, etc.
- Read this to make iPhone-friendly skins:
  http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariWebContent/OptimizingforSafarioniPhone/OptimizingforSafarioniPhone.html
- On iPhone, when mark an entry as read (using fancy skin), the
  following happens:
	- Set both checkboxes
	- Possibly long delay while calls markitem.php
	- Finally item collapses
  this is bogus: item collapse immediately, and change color only when
  markitem has returned.
	Sun May  2 13:18:42 2010: Not clear where this delay is coming
  from. Doesn't seem to be my code. Apparently Safari is really slow
  about updating the display.
	Possible fix:
  http://matt.might.net/articles/how-to-native-iphone-ipad-apps-in-javascript/
  suggests that capturing touch and gesture events is faster than
  capturing clicks. A quick replacement of "onclick=" with
  "ontouchstart=" doesn't show any improvement.
	Perhaps need to use addEventListener() or something rather than
  using the "on*=" attributes.
- Make updates smarter about updating when no network available.
  On iPhone, don't contact the network if there's no network to contact.
- Add an entry in the 'options' table, saying which version/revision
  of Newsbite this is, and perhaps another saying which version of the
  schema.
- Ads: perhaps should generalize: look for
  <a href="$some_ad_url">...</a>, optionally wrapped in <p>...</p>.
- WaPo duplicates: "Today's Highlights" can duplicate stories from
  other feeds. Would be nice to detect these and delete duplicates.
	Ditto for Google news
	it might be useful to define a cluster of feeds: "WaPo
  Highlights", "WaPo International", and "WaPo Top Stories" could be
  grouped together, and duplicate items removed.
	Sometimes the URLs are different (e.g., WaPo or NYT use an
  "&src=" or "#foo" parameter to say which feed the user came from).
  Need a way to normalize URLs.
	Perhaps the best way to do this is to just allow the user to
  define arbitrary groups, then attach properties/plugins/hooks to
  groups, as well as to individual feeds.
- Sorting by many criteria
	It'd be nice to sort all of the items by many criteria, e.g.,
  comics come before news; comics are shown oldest-first, while news
  items are shown newest-first; dKos articles by Hunter percolate to
  the top; etc.
	This is probably too hard to sort in MySQL, so presumably need
  to do it in PHP. However, don't want to sort a massive data set on
  the fly.
	Might be possible to pre-sort in a cron job. But to avoid
  sorting a massive data set, would it be possible to use some variant
  of quicksort to first sort by time, then sort by "comics go before
  news", etc.?
- Would be useful on the feed list page to be able to toggle empty
  feeds on and off. Also stale feeds (those that haven't been updated
  in 30 days (or whatever)).
	Can't just toggle visibility in JS: that would break coloring
  alternating rows.
	Eh. Fuck alternating rows.
- Might be useful to add gestures, for portable devices. See
  http://depts.washington.edu/aimgroup/proj/dollar/
	On the N810, one can scroll the display by drawing on it. So
  adding gesture recognition is likely to play havoc with that. Ditto
  iPhone/iPad.
	Perhaps hard-code straight-line templates, and implement
  scrolling manually. (Swipe, on iPhone/iPad.)
	That implementation is rotation-independent: "v" can be
  drawn as ">" and still be recognized as "v". To fix this, can divide
  space into quadrants (or octants) centered on centroid, and classify
  shapes based on where the starting point is WRT the starting point.
  This way, "v" would have the starting point in the NW quadrant,
  while ">" would have it in the SW quadrant, so they'd be seen as
  different.
	This is particularly important because it would be desirable
  to have straight lines at different angles (e.g., stroke up to go to
  previous article, stroke down to go to next article), while the $1
  gesture algorithm would see those as the same shape.
	To have straight lines, it would be necessary to add the hacks
  they suuggest in the paper: check to see whether one of the
  dimensions is "too small".
	The distance calculation has a square root. This seems
  expensive and unnecessary, since we're only trying to find the
  closest match. Might save some CPU cycles.
	Which gestures would we want?
	- Go to previous article
	- Go to next article
	- Mark as read and move to next article
	- Mark as unread?
	- Refresh list of articles
- Link on feeds page (in both skins) to show inactive feeds, with
  option to reactivate them.
- Need tool to fix database schema.
	ALTER TABLE items CHANGE COLUMN url url VARCHAR(255);
	ALTER TABLE items CHANGE COLUMN comment_url comment_url VARCHAR(255);
	ALTER TABLE items CHANGE COLUMN comment_rss comment_rss VARCHAR(255);
- Ajax: "Clear changes" should go through list of items and uncheck
  them.
- Ajax feed update: use regular expressions to find lines in JSON
  text. Text is sometimes truncated in the middle of a line, resulting
  in parse errors.
- Should be able to read both read and unread articles.
- Limit size of articles (to one N810 screenful?)
- Would be nice to have either "new" flag or a "saved for later" flag.
  The latter is probably more useful.
	That way, can go through today's stuff fairly quickly, without
  having to scroll through messages you've already seen.
- (bug?) Bad HTML in item description/content causes parse errors in
  XMLReader. This is going to crop up a lot, and should be fixed.
	Worst solution: skip the entire feed, making it unusable until
  the bad article expires. (Currently implemented.)
	Better solution: just skip the article, and proceed with the
  next one. Presumably this involves checkpointing when each article
  begins, and skipping the bad ones.
	Better solution: just skip the bad element, and somehow mark
  it bad in a user-visible way. Again, this involves checkpointing.
	Better solution?: Punt: bad XML is not necessarily bad HTML,
  at least so bad that a browser can't deal with it (Firefox displays
  "&#2;" as a gray box; Safari seems to remove them from the source
  altogether. Try to suck out the bits between <description> and
  </description> as a string, and leave it up to the browser to render
  it. Unfortunately, this invites XSS attacks.
	Hack solution: look for /&#\d{0,2};/ and fix them.

	Unfortunately, XMLReader doesn't seem to support
  checkpointing. Perhaps another XML module can deal with this more
  gracefully? OTOH, is it a good idea to be too liberal in what we
  accept? Isn't that an invitation to XSS? XML is supposed to be
  really anal about syntax.
- There should really be a tool for testing plugins.
	For removing ads and such: it'd be nice to plug the XML or the
  article into a temp file, and 
- Should there be an external log file, for debugging and whatnot?
	It'd also be nice to add a pile of monitoring, to be able to
  see what happens when, to optimize properly.
	Perhaps use syslog? I think it's a core function in PHP.
- Make a list of conditions for calling it version 2.0
	- Fully-functional Ajax skin
		- XXX - Meaning what, exactly?
- Makefile:
	Run tests:
		php -l <everything>
		Try to call various functions and make sure they return
		correct results
		php-cgi -c php.ini <script>
- Documentation for how the plugins for feed.inc work.
	Texinfo? Add code to Makefile to generate HTML documentation.
- More fine-grained function to select items from a feed:
	- One feed, or all feeds
	- Time range: e.g., the last 24 hours
	- Order: oldest to youngest/youngest to oldest
	- How many articles to get
- Passwords probably shouldn't be stored in database. As first pass,
  try removing them from the database. Put them in another file, and
  add functions to read and write passwords.
	Plus, it's possible that at some point it'll become
  necessary/desirable to use authentication methods other than
  username/password, possibly involving certificate exchange or
  something.
	We already have a server-side secret string. Could encrypt
  feed passwords with that string.
- Should be able to specify password for all of livejournal.com, not
  have to specify it separately for every LJ feed.
	Use parse_url() to get hostname.
	LJ friends feeds in OPML format:
  http://www.livejournal.com/tools/opml.bml?user=arensb
- Tool to import feeds and items from existing Feed on
  Feeds/Monkeychow database.
- SQL schema should support folders, i.e., user can group feeds into
  categories. By default, all feeds go in a " root" folder (the
  leading space marks this as special; strip space from user-defined
  folders).
	Folders can contain subfolders, and so on. So each folder
  needs a pointer to its parent folder. Better yet: for each group,
  list the group's contents. That way, a feed can be in multiple
  groups. (Though will need to make sure to avoid loops, e.g., groups
  containing themselves (perhaps indirectly), or at least avoiding
  infinite loops/recursion.)
	AFS's pts uses negative UIDs to represent groups. Perhaps the
  same can be done here.
- Ajax: user should also be able to drag feeds around, so they're
  listed in arbitrary order. Need an "nth" field somewhere, giving the
  numeric order in which the feed is listed.
	Ideally, it should be possible to have a feed in multiple
  folders (e.g., Pharyngula goes in both "Science" and "Atheism", or
  Daily Kos goes in both "Politics" and "Stuff I Read Daily"), so need
  a separate entry (and nth field) for each instance. And each user.
- LiveJournal plugin (or something): would be nice to be able to say
  "I'm user So-and-so at LiveJournal" (or other site using the LJ
  code) and have it automatically subscribe to your friends feeds
  there.
	Need to somehow keep track of the fact that these feeds were
  auto-generated. If I change my password on LiveJournal, I should
  only have to change it once (in the LJ plugin config) and have the
  engine figure out that the password for all the LJ-friends feeds has
  changed as well.
- Multi-user support: this would be nice. It would also be nice if the
  back-end could avoid duplicating information, i.e., not store two
  records for the same article.
	However, for now, there is enough user-specific information in
  the schema for both feeds and items that this isn't practical. Start
  out with naive implementation, and see if anyone starts using it on
  a multi-user system.
- Deal with malformed text in the RSS feed, e.g., unescaped or
  poorly-escaped entities, and the like.
- Killfile: automatically mark as read messages that match certain
  criteria.
	Perhaps this should have a scoring system or something: I'd
  like to killfile the stories on dKos that match /\w\w-\d\d/ (because
  those talk about specific senate/house races that I generally don't
  care about), but show the ones that match /MD-\d\d/, since I do care
  about those. Or kill the "diary rescue" threads, unless they contain
  "arensb".
	Should probably be done in plugin.
- Smart groups: like iTunes smart playlists, or killfiles (above):
  automatically populate a group based on user-specified criteria.
	In fact, ordinary feeds could be implemented with this
  mechanism: the ordinary dKos article list could simply be the set of
  all articles that come from the dKos feed.
- Don't want to automatically display a feed's image: some are good
  (like LJ icons), others are annoying, like FeedBurner feeds that
  just have a "Feed powered by FeedBurner" image.
	Make this a per-feed customizable option.
- Provide hooks for various plugins to do their thing.
	- After adding or updating a feed in the database. Perhaps to
	  add fields to a custom table.
		Could use this to automatically delete subscription to
	  feeds that haven't been updated in a while, e.g., comment
	  threads.
	- After adding or updating an item in the database. Perhaps to
	  add fields to a custom table.
	- Mark items as read as they come in, based on subject or
	  category or whatever.
	- Before marking an item as read.
	- Before deleting an item in the database. Perhaps to clean up
	  custom tables.
	- Before deleting a feed in the database. Perhaps to clean up
	  custom tables.
- Feed-parsing plugins: Need to have a hook for items, and another for
  feeds. Don't do this as post-element hooks, because the plugin
  shouldn't be expected to know which element represents an item/feed.
	Also, if plugins add stuff to the bottom of the article text,
  want to give the user some control over the order in which they get
  called.
- i18n.
	Can start by identifying translatable strings and marking
  them, so they can be translated later. Define dummy _() and N_()
  functions.
	Can't trust things like $LANG and $LC_* to decide which
  language to translate to. Probably ought to try to guess from
  browser settings. Failing that, use a cookie or an option in the
  database.
- Browser IDs:
  Nokia N810 browser:
  "Mozilla/5.0 (X11; U; Linux armv6l; en-US; rv:1.9a6pre) Gecko/20071128 Firefox/3.0a1 Tablet browser 0.2.2 RX-34+RX-44_2008SE_2.2007.51-3"

  Nokia N810 RSS reader:
  "gnome-vfs/2.16.3 neon/0.25.4"

  Palm T|X browser:
  "Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; PalmSource/Palm-D050; Blazer/4.3) 16;320x320"
	This can be used to pick a default skin.

  Wii browser:
  Opera/9.30 (Nintendo Wii; U; ; 3642; en)

  iPad browser:
  Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B367 Safari/531.21.10
- One possible way of displaying a feed might be to have a small frame
  at the top, like Google Image results, with a brief identification
  of the item, and navigation arrows to go to the {previous,next}
  {item,feed}. The bottom frame shows the original article.
- MediaWiki plugin: if you subscribe to the "recent changes" page on a
  MediaWiki wiki, there should be buttons at the bottom that allow you
  to either mark the change as patrolled, or revert it.
	Unfortunately, this doesn't seem possible.
- Ajax: keybindings for articles:
	'm'	(more) when viewing preview, show full article
	'j'	move to next item (vi key)
	'k'	move to previous item (vi key)
	'd'	mark item as read, and skip to next item
	'u'	mark item as unread, and skip to next item
	?	move to previous item

	Problem: attaching an event listener to each "item" element
  doesn't work reliably: apparently Firefox doesn't understand
  focus-follows-mouse, so it doesn't trigger as it should, when the
  mouse is over a given item.
	Besides, it's probably more efficient to just have a listener
  on the window.
	Perhaps can attach "mouseover" and "mouseout" listeners to
  individual items: the last one that gets a mouseover is the current
  item.

	Probably best to have a keytab that maps keycodes to
  functions, in Emacs fashion. Probably easiest to have 4 (or 8, or
  32) keytabs, indexed by modifier key:
	keytab[0] => bindings where Meta == false
	keytab[0][1] => bindings where Meta == false, Ctrl == true
	keytab[0][1][0][90] =>
		binding for Meta == false, Ctrl == true, Shift == false,
		keycode == 90.
  Apparently booleans can be used as integers, so this should work.
	Of course, by the same token, we could just have a 2-D array:
		keytab[modifiers][keycode]
  where
	modifiers == shiftKey +
		(ctrlKey << 1) +
		(altKey << 2) +
		(metaKey << 3);
- Handle attachments (e.g., <media:content>,
  <feedburner:origEnclosureLink>) kind of like a mail reader would:
  put a list at the bottom of the message.
- Plugin for XKCD: copy the alt text underneath the image, so you
  don't have to RTFS or "View Properties" to see it.
	(Or, if you want to get fancy: abduct the tooltip stuff and
  write a replacement that shows the entire title, like Google does.)
- LiveJournal plugin should look at the <description> and parse lj
  tags in the body of the item. E.g., expand '<lj:user="foo">' into
  proper HTML.
	Apparently <lj-embed id="<int>" /> indicates an embedded item.
	Some known tags:
  <lj:journal>
  <lj:journalid>
  <lj:journaltype>
  <lj:mood>
  <lj:music>
  <lj:poster>
  <lj:posterid>
  <lj:reply-count>
  <lj:security>
- Security: should probably try to parse the body of any foreign text
  (in particular, summary and body of posts, as well as titles) to
  include only known-good HTML.
	Otherwise, vulnerable to XSS, e.g., by including JavaScript in
  post.
	Perhaps add a whitelist of trusted sites (e.g., APOD).
- Per-feed options:
	- Whether to display oldest-first by default (good for comics)
	  or newest-first (good for news).
	- Whether the feed contains BBcode (like top10).
- Page to set global and per-feed options.
- Icons for common actions:
	- Refresh (feed, all feeds)
	- Mark as read
- How do skins, templates, scripts, and HTML files interact?
	If a skin wants to link to, say, an "about.html" file that
  gives the author's name, where should the "about.html" file go?
	If a skin uses frames, and therefore requires an HTML file for
  each frame, where do those go?
	What about ancillary files like JavaScript scripts and CSS
  files?
	A skin should come in one directory, for ease of installation
  and removal. Should it be
	myskin/html
	myskin/templates
  OTOH, this means that the skin can't easily contain private elements
  like PHP include files, since those are (preferably) in a separate,
  directory, not visible by the web client.
- Should it be possible to have different skins for different feeds?
  E.g., for the Onion, just seeing the headlines (sometimes summaries)
  is sufficient. For This Modern World, might want a strip-frame at
  the top, and the original site underneath.
- Might be nice to have "lightweight skins": the default skin is
  reasonably modular: there's a template for viewing a list of items,
  which in turn uses a template to display a single item.
	A lightweight skin could default to view.tpl for displaying a
  list of items, and only provide a custom item.tpl for displaying the
  item itself.
	For that matter, there could be a per-feed option to specify
  the skin to use for that feed's items, and view.tpl could select
  whichever skin is used for that particular feed.
- Perhaps should separate colors and fonts into a separate stylesheet:
  that way, can easily change the color scheme, perhaps even using an
  autogenerated stylesheet.
	Perhaps can call this "outfit": modifies appearance by going
  over the skin, and is easy to change.
- RSS doesn't provide content by default, just a summary
  (<description>). Perhaps add a hook after processing <item>, such
  that if there's a <description> but no <content:encoded> or such,
  then move the description to content.
- Keep statistics: keep track of which feeds/groups user reads, how
  often, etc.
	Keep track of how often a feed is updated. Perhaps can have
  rarely-updated feeds percolate to the top.
- Skin for comics that don't include the image in the feed: add an
  <iframe> or something in the view template, that shows the original
  page. Perhaps scroll to a position where the image is visible.
	For gocomics.com, can scroll to <div id="comicTools">.
  Probably sufficient.
	Unfortunately, cross-site permissions don't seem to allow
  manipulating the contents of an <iframe>, not even to scroll the
  window around. But can have
	<iframe src="http://some/url#some-anchor"></iframe>
  where "some-anchor" is an ID or anchor.
	gocomics.com "#comicTools".
	This Modern World: "#post_items".
	I Drew This: no good anchors.
	Jesus and Mo: "#comic"
	Russell's Teapot: no good anchors.
	Zero Punctuation: ?
	The Pain: no good anchors
	Perry Bible Fellowship: "#topimg"
	User Friendly: no good anchors
- Add a way of marking an item as "saved for later".
- Try to make a "collapsed" view for long articles that don't have a
  summary: clip to 10em or something.
- A bunch of elements in the templates have id="..." identifiers
  (body, forms, etc.) Come up with a good naming scheme for them, to
  keep them all straight.
- http://www.smarty.net/manual/en/template.resources.php tells how to
  get templates from any source. Perhaps can set up "skin" scheme, so can use
	$smarty->display("skin:item.tpl");
  and it'll fetch "current-skin/item.tpl" if it exists, or
  "default-skin/item.tpl" otherwise.
	Or could allow a plugin to specify a feed-specific skin,
  either as a record in the database, or as a string.
	In the meantime, just require the "skins/$skin_name" directory
  to contain every template. (Disk space is cheap, right? :-))
- The example in TFM for php_sapi_name() is useful for determining
  whether the script is being called from the command line or as a CGI
  script.
	This, in turn, can be used to implement dual-mode commands. In
  particular, 'update.php' can be called from cron to update every
  hour (or whatever).
- "Today's feeds" could use multiple criteria to come up with
  partially-ordered set: say there are a bunch of unread news stories,
  several unread User Friendly strips, and today's weather report.
	The user could decree that User Friendly should be presented
  in chronological order (i.e., when comparing two User Friendly
  articles, the older one goes on top; when comparing a User Friendly
  article and anything else, the order is undefined).
	The news stories, OTOH, should be presented in reverse
  chronological order (i.e., the newer of two news stories goes on
  top).
	And today's weather report is important, but yesterday's is
  garbage: today's weather report goes above anything else, but
  anything older than the latest one goes at the bottom.
	We can multiply such rules ad infinitum (perhaps look at how
  often a feed is updated, so busy sites don't crowd out the ones that
  update rarely). The idea is, these rules can define a
  partially-ordered set. It would be cool to use these to determine
  the order in which to display articles.
- Rethink how markitems.php works, which arguments it takes. Check
  whichever template calls it (view.tpl and item.tpl?).
	The easiest, no-JavaScript case is probably the way FoF does
  it: if we're displaying unread items, give the option of marking
  items as read. If we're displaying all items, give the option of
  marking items as unread.
	Perhaps do this by adding a hidden "new_state" input field to
  the form (and of course update markitems.php to check for it).
	With JavaScript, we can toggle the state of each item as the
  user requests.
- There are a bunch of times when it's handy to parse XML files:
  reading RSS feeds, importing OPML, parsing HTML pages to find the
  feeds, etc.
	Would it be helpful to have a generic function that parses any
  kind of HTML/XML/XHTML file into a data structure? That could make
  it simpler to switch from one back-end XML parser to another, if
  desired.
- There are Mozilla- and Safari-specific bits in the CSS files. Is it
  worth adding yet another CSS file, for browser-specific CSS?
	Might be worth it: IE doesn't appear to support rounded
  borders, so the left and right padding on Firefox and Safari makes
  it look weird.
- For nonstandard HTML attributes like which="collapsed", should
  probably use xmlns:nb="..." and nb:which="collapsed", just to try to
  be standards-compliant.
- Name: in "2001", Clarke described a tablet PC that served as a
  customized newspaper. Did he give it a name?
	Yes: Newspad
- Jira generates wonky RSS.
	- https://issues.apache.org/
	- Select 'Jira'
	- Select a project (e.g., 'mod_python')
	- Get a list of open bugs
  The page has "RSS (Issues | Comments)". There's also a
  '<link rel="alternate"' in the header that points to an RSS 0.92
  feed. But the two are not identical.
	The feed from <head> is non-conforming: it contains
  nonstandard elements.
- How should items.pub_time and items.last_update work together?
	The intent is that if an article is first written on Jan. 1,
  then updated on Jan. 5, then it'll show up at the top of "today's
  news" on Jan. 5 (assuming it's still unread).
	There are several complicating factors:
	- Some feeds don't include publishing or update times.
	- Some feeds lie and give the current time for every item.
	  (examples?)
- Should probably combine "edit feed" and "unsubscribe from feed".
- Navigation arrows ("Earlier"/"Later") should be based on the number
  of posts that match the display criteria. It is absurd to have an
  "Earlier" link on a page that also says "There are no items to
  display". Check numbers from db_get_feed_counts().
- Try to unite update_feed() and update_all_feeds()
- LJ feeds give the same URL for "read more" and comments. Does it
  make sense to combine the two in item.tpl?
- Ought to support categories. WaPo feeds, in particular, have lots of
  them.
	Presumably should add another table, with {item-id, scheme,
  category} tuples. The scheme is for particular setups (like the
  "media:" RSS extension, or Slashdot's categories). That way, can
  show all posts in a given {scheme, category}, or all posts in a
  given {category}.
	Can also create category cloud, to see which keywords are most
  active ATM.
- INSTALL: say to make backup of: db, .htaccess, config.inc.
- Perhaps should have something in the database (in global options?)
  that gives the version number of the database schema. That way, can
  detect whether database is out of date wrt PHP scripts.
	Another possibility would be to add an 'upgrade.php' script to
  the distro: 'common.inc' includes that, upgrades the installation,
  then deletes itself.
	In order to be allowed to delete itself, the script should be
  put in a directory that the httpd user can write to: the Smarty
  compile directory. Yes, this is a hack.
- Run timing tests with different numbers of feeds. See if there's a
  way to estimate a good number of parallel connections.
	If there is, allow user to set $PARALLEL_UPDATES to "auto",
  and have it be computed automatically.
- How should abort() deal with JSON/XML/whatever non-HTML output?
- Ajax/Firefox: use client-side storage (DOM::Storage) to cache
  articles.
  See also
  http://dev.w3.org/html5/webstorage/
	Note that the Storage interface only allows storing and
  retrieving strings, so data structures must be JSONified before
  storage.
- Is there a way to normalize HTML? If the <![CDATA[...]]> section in
  a feed contains mismatched tags, e.g.
	<p><a ...><img/></p>
  is there a way to keep the badness contained within the <div item>
  when it's displayed, and not contaminate the rest of the page?
	Iframes seem ugly. Perhaps one of the XML parsers can parse
  HTML and deal with errors?
- Perhaps class Skin can try to be a singleton: that way, if multiple
  files call 'new Skin', they'll both refer to the same object. OTOH,
  that should never happen.
- Perhaps expand the notion of "feed": could show email, current
  weather conditions, Nagios alerts, etc.
- Perhaps add a "collapse all" button in view.tpl that'll collapse all
  displayed items.
- In main view: have a button to toggle displaying feeds with no
  unread items. This could be difficult, since the color of rows is
  set by their class, which in turn is in the .tpl file.
- Plug-in for Atheist Nexus (and others): the body of the item is
  presented as HTML, but is actually plain text, using \n\n as
  paragraph separators. Add <p>...</p> tags.
- Make things prettier:
	- Background image
	- Perhaps translucent elements/backgrounds
	- Button bars with gradient backgrounds
- Possible backgrounds:
	http://www.imageabstraction.com/gallery/index.php?action=showpic&cat=11&pic=64
	http://www.imageabstraction.com/gallery/index.php?action=showpic&cat=11&pic=57
	http://www.imageabstraction.com/gallery/index.php?action=showpic&cat=11&pic=58
	http://www.imageabstraction.com/gallery/index.php?action=showpic&cat=11&pic=59
	http://www.imageabstraction.com/gallery/index.php?action=showpic&cat=10&pic=90
- When collapsing an item to just show the summary, scroll the window
  so that the article doesn't move: if clicking the bottom collapse
  bar, scroll so that the bottom of the item remains at the same
  position in the window.
- Icon for iPhone: see
  http://developer.apple.com/safari/library/documentation/InternetWeb/Conceptual/iPhoneWebAppHIG/MetricsLayout/MetricsLayout.html#//apple_ref/doc/uid/TP40007900-CH6-SW31
  http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html
	Should be 57x57 pixel PNG file, with square corners.
	Add
  <link rel="apple-touch-icon" href="my-app-icon.png"/>
  to <head> section of web app. This way, when user puts the app on
  the iPhone desktop, its icon will be the PNG file instead of a
  screenshot of the page.
	There are designated filenames: "apple-touch-icon.png" is, I
  think, the default if the <link> item is omitted.
  "apple-touch-icon-precomposed.png" means that the iPod shouldn't add
  effects (the light-from-above, reflection thingy).
- iPhone standalone app: when the site is saved to a desktop icon,
  iPhone OS packages the app up as a standalone. There are several
  useful tags and whatnot for this. The following tags work when the
  app is saved to the desktop, then started from there (like an
  ordinary app):
	Splash screen:
  <link rel="apple-touch-startup-image" href="startup.png"/>
	Say that the app is standalone:
  <meta name="apple-mobile-web-app-capable" content="yes" />
	This gets rid of the Safari URL bar and navigation buttons at
  the bottom.
	Status bar appearance:
  <meta name="apple-mobile-web-app-status-bar-style" content="black" />
  Can set to "default", "black", or "black-translucent".
	I think this only works on full-on mobile apps, though.
- Storing data on iPhone:
  http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariWebContent/Client-SideStorage/Client-SideStorage.html
  Can also set up a manifest file, so that the app will download
  images and whatnot to be used when the device is offline.
- CSS allows the device to decide whether it considers itself a
  handheld device:
  http://www.boutell.com/newfaq/creating/iphone.html
	@media handheld {
	  .navigation {
	    display: none;
	  }
	}
  More at http://www.w3.org/TR/CSS2/media.html

  Apparently currently (May 2010) neither iPod Touch nor iPad consider
  themselves handheld devices. Go figure.
- CSS media queries described at
  http://www.w3.org/TR/2002/CR-css3-mediaqueries-20020708/
- Might be fun to set a background that changes over the course of a
  day.
- Add a customized error page for when can't authenticate?
	ErrorDocument /path/to/page.html
  in .htaccess
