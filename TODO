- SQL schema should support folders, i.e., user can group feeds into
  categories. By default, all feeds go in a " root" folder (the
  leading space marks this as special; strip space from user-defined
  folders).
- User should also be able to drag feeds around, so they're listed in
  arbitrary order. Need an "nth" field somewhere, giving the numeric
  order in which the feed is listed.
	Ideally, it should be possible to have a feed in multiple
  folders (e.g., Pharyngula goes in both "Science" and "Atheism", or
  Daily Kos goes in both "Politics" and "Stuff I Read Daily"), so need
  a separate entry (and nth field) for each instance. And each user.
- Folders can contain subfolders, and so on. So each folder needs a
  pointer to its parent folder.
- Item states: each post/article/item can be in one of several states:
	new	Never seen. Added since the last time any articles
		  were read
	unread	Presented to the user at least once, but not marked as
		  read.
	read	Marked as read, but not yet deleted.
	deleted	Deleted, but not yet expunged from database. This may
		  or may not be useful.
- LiveJournal plugin (or something): would be nice to be able to say
  "I'm user So-and-so at LiveJournal" (or other site using the LJ
  code) and have it automatically subscribe to your friends feeds
  there.
	Need to somehow keep track of the fact that these feeds were
  auto-generated. If I change my password on LiveJournal, I should
  only have to change it once (in the LJ plugin config) and have the
  engine figure out that the password for all the LJ-friends feeds has
  changed as well.
- Multi-user support: this would be nice. It would also be nice if the
  back-end could avoid duplicating information, i.e., not store two
  records for the same article.
	However, for now, there is enough user-specific information in
  the schema for both feeds and items that this isn't practical. Start
  out with naive implementation, and see if anyone starts using it on
  a multi-user system.
- User authentication: should this be done here, or in .htaccess?
- Deal with malformed text in the RSS feed, e.g., unescaped or
  poorly-escaped entities, and the like.
- Would be nice if engine could update multiple feeds at the same
  time, so that a single unresponsive host doesn't cause a long wait.
	Use curl_multi_*, to fetch multiple feeds at once.
- Smarty(?) PHP templates for different skins: full-featured browser
  vs. palmtop vs. phone, etc.
- Killfile: automatically mark as read messages that match certain
  criteria.
	Perhaps this should have a scoring system or something: I'd
  like to killfile the stories on dKos that match /\w\w-\d\d/ (because
  those talk about specific senate/house races that I generally don't
  care about), but show the ones that match /MD-\d\d/, since I do care
  about those. Or kill the "diary rescue" threads, unless they contain
  "arensb".
- Smart groups: like iTunes smart playlists, or killfiles (above):
  automatically populate a group based on user-specified criteria.
	In fact, ordinary feeds could be implemented with this
  mechanism: the ordinary dKos article list could simply be the set of
  all articles that come from the dKos feed.
- Don't want to automatically display a feed's image: some are good
  (like LJ icons), others are annoying, like FeedBurner feeds that
  just have a "Feed powered by FeedBurner" image.
- For each feed, give the option of displaying just the image (if
  any), the title, or both.
- For each feed and item, should store unrecognized elements
  (especially in specialized namespaces like "lj") separately, in case
  a plugin can make use of it.
	For instance, an LJ plugin can show who posted an article in a
  community journal, or display appropriate mood and visibility icons.

	AFAICT getDocNamespaces() returns the namespaces that are
  declared within a document, while getNamespaces() returns the ones
  that are actually used. Of course, in a well-formed document, any
  namespace that's used will also be declared.
	Experimentation shows that if there's an element with an
  undeclared namespace, it won't show up in either list. So don't use
  those. But if a declaration is buried deep within the document,
  it'll show up in getDocNamespaces(true).
	Perhaps the sensible thing to do is to look at three levels:
  the document, feed, and item level; see which namespaces are used,
  and for each one, see whether there's a plugin that'll handle that
  namespace (as defined by its DTD).
	Some namespaces seem to be fairly common, e.g.
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
  Should have built-in handlers for these. Also ought to have plugins
  to add one's own handlers (hooks).

	Also, note that elements in one namespace can have attributes
  in another, e.g.:
	<rss xmlns="http://www.foo.com/"
	     xmlns:bar="http://www.bar.com/">
	<channel>
	  <item bar:type="article">
	    <!-- "item" is in namespace "", but "type" is in namespace
	    "bar" -->
- Make curl (and other modules) optional: use references-to-functions
  to pick the appropriate function to call:
	function fetch_rss_curl(...) { ... }
	$fetch_rss = fetch_rss_curl;
	$fetch_rss($url);
- Provide hooks for various plugins to do their thing.
- Would be nice to have "(more)" link at the bottom, for items where
  description/summary isn't the whole article.
	Should also have "mark as read" buttons at top and bottom of
  article: top for when the subject is enough to know you want to skip
  it, and bottom for marking it as done after you've read it.
- In Ajax mode, marking an item as read should tell the server to
  delete it now, so that if you switch from workstation to laptop,
  your feeds are already up to date.
- Perhaps extend Smarty, so don't need to set the paths every time.
- Need a good way to abort in case of error.
- Tool to import feeds and items from existing Feed on
  Feeds/Monkeychow database.
- In common.inc (or something), need a good function to abort with an
  error.
- Rewrite the XML-parsing code using XMLReader or XML Parser.
- Nokia N810 browser identifies itself as:
  "Mozilla/5.0 (X11; U; Linux armv6l; en-US; rv:1.9a6pre) Gecko/20071128 Firefox/3.0a1 Tablet browser 0.2.2 RX-34+RX-44_2008SE_2.2007.51-3"

  Palm T|X browser identifies itself as:
  "Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; PalmSource/Palm-D050; Blazer/4.3) 16;320x320"
- One possible way of displaying a feed might be to have a small frame
  at the top, like Google Image results, with a brief identification
  of the item, and navigation arrows to go to the {previous,next}
  {item,feed}. The bottom frame shows the original article.
- FeedBurner plugin: remove the stuff (esp. bugs) that FeedBurner adds
  to bottom of articles.
- Add <form> to view.php, to mark articles as read.
- In view.php, show 10 articles at a time (or some other configurable
  value).
- MediaWiki plugin: if you subscribe to the "recent changes" page on a
  MediaWiki wiki, there should be buttons at the bottom that allow you
  to either mark the change as patrolled, or revert it.
- Feed on Feeds has "Today's items". This is kinda bogus, especially
  when reading feeds around midnight.
	Instead, just show all items in reverse chronological order,
  10 or 50 at a time.
	If possible, add heading between items when the date changes
  (like LiveJournal).
- From conversation with Mike vW:
	For parsing feed XML, write a generic parser that calls
  plugins for everything. When it sees
	<rss><item><author>Firstname Lastname</author>,
  it calls rss_parse_element(
  	$context = array("rss", "item"),
	$name = "author",
	$value = "Firstname Lastname",
	$attributes = array(...),
	$contents = array(),
	&$retval = array(...));

  - $context gives the context, so a plugin can do different things with
  <feed><author> and <feed><entry><author> if it wants to.
  - $name is the name of the element
  - $value is the value of the element
  - $attributes holds the attributes of the element
  - $contents is the $retval filled in by the children (see below)
  - $retval is an array that rss_parse_element() is expected to fill
    in.

	Thus, if you have an Atom feed with
	<feed>
	  <entry>
	    <author>
	      <email>foo@bar.com</email>
	      <name>J. Random Hacker</name>
	      <url>http://www.bar.com/~foo/</url>
	    </author>
	  </entry>
	 </feed>

    then first call the Atom plugin when the </email> element has been
    seen. It sets
	$retval = array(
		"email" => "foo@bar.com"
		);
    Next call it when the </name> and </url> elements have been seen,
    so the array looks like
	$retval = array(
		"email" => "foo@bar.com",
		"name" => "J. Random Hacker",
		"url" = "http://www.bar.com/~foo/"
		);
    Next we call it after seeing </author>. It is given
	$contents = array(
		"email" => "foo@bar.com",
		"name" => "J. Random Hacker",
		"url" = "http://www.bar.com/~foo/"
		);
	$retval = array();
    and is expected to set
	$retval = array(
		"author" => "J. Random Hacker <foo@bar.com>"
		);

    This percolates upward until we eventually have a data structure
    in a well-known format:
	$feed = array(
		"name" => "Some Site",
		"url => "http://www.foo.com/",
		"items" = array(
				array(
					"title" => "Post title",
					"post_date" => ...,
					...
				)
			)
		);

    Further flourishes are possible (and desirable). E.g., imagine a
    plugin that looks for <lj:mood>Happy</lj:mood> and appends "Mood:
    happy" to the bottom of the post.
	Since we don't know the order in which the <lj:mood> and
    <content> elements appear, the plugin will have to first be called
    when </lj:mood> has been seen, and again when </entry> has been
    seen. The latter can then append text to $entry['content'].

	Need to register these sorts of hooks somehow.
