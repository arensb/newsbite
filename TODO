- bug: "(site)" links from LJ are broken.
- bug: when on the last page (earliest items) and use "mark all as
  read", get blank page.
- editfeed.php: return to someplace useful
- Would be nice to have either "new" flag or a "saved for later" flag.
  The latter is probably more useful.
	That way, can go through today's stuff fairly quickly, without
  having to scroll through messages you've already seen.
- item.tpl: Show both pub_time and last_update, at least for debugging.
- Date box in default skin: pretty, but the prettiness doesn't
  outweigh usefulness. Switch to a more conventional date display.
  Show year.
- Limit size of articles (to one N810 screenful?)
- view.tpl: should have link to index.php
- feeds.tpl: put one feed per line. More compact, easier N810
  navigation.
- (bug?) Bad HTML in item description/content causes parse errors in
  XMLReader. This is going to crop up a lot, and should be fixed.
	Worst solution: skip the entire feed, making it unusable until
  the bad article expires. (Currently implemented.)
	Better solution: just skip the article, and proceed with the
  next one. Presumably this involves checkpointing when each article
  begins, and skipping the bad ones.
	Better solution: just skip the bad element, and somehow mark
  it bad in a user-visible way. Again, this involves checkpointing.
	Better solution?: Punt: bad XML is not necessarily bad HTML,
  at least so bad that a browser can't deal with it (Firefox displays
  "&#2;" as a gray box; Safari seems to remove them from the source
  altogether. Try to suck out the bits between <description> and
  </description> as a string, and leave it up to the browser to render
  it. Unfortunately, this invites XSS attacks.
	Hack solution: look for /&#\d{0,2};/ and fix them.

	Unfortunately, XMLReader doesn't seem to support
  checkpointing. Perhaps another XML module can deal with this more
  gracefully? OTOH, is it a good idea to be too liberal in what we
  accept? Isn't that an invitation to XSS? XML is supposed to be
  really anal about syntax.
- Make a list of conditions for calling it version 1.0
	* Can add, remove feeds
	- Documentation for installing
	- Proper error pages
	* OPML
	- Don't print trace messages
	- editfeed.php: return to someplace useful
	- Makefile: build distro
	- Remove private values from config.inc
- Makefile:
	Run tests:
		php -l <everything>
		Try to call various functions and make sure they return
		correct results
		php-cgi -c php.ini <script>
	Build distro
- Installation:
	htdocs/smarty/templates_c must be writable by httpd.
	htdocs/smarty/cache must be writable by httpd.
- Documentation for how the plugins for feed.inc work.
	Texinfo? Add code to Makefile to generate HTML documentation.
- More fine-grained function to select items from a feed:
	- One feed, or all feeds
	- Time range: e.g., the last 24 hours
	- Order: oldest to youngest/youngest to oldest
	- How many articles to get
- Passwords probably shouldn't be stored in database. As first pass,
  try removing them from the database. Put them in another file, and
  add functions to read and write passwords.
	Plus, it's possible that at some point it'll become
  necessary/desirable to use authentication methods other than
  username/password, possibly involving certificate exchange or
  something.
- Should be able to specify password for all of livejournal.com, not
  have to specify it separately for every LJ feed.
	Use parse_url() to get hostname.
	LJ friends feeds in OPML format:
  http://www.livejournal.com/tools/opml.bml?user=arensb
- Tool to import feeds and items from existing Feed on
  Feeds/Monkeychow database.
- SQL schema should support folders, i.e., user can group feeds into
  categories. By default, all feeds go in a " root" folder (the
  leading space marks this as special; strip space from user-defined
  folders).
- User should also be able to drag feeds around, so they're listed in
  arbitrary order. Need an "nth" field somewhere, giving the numeric
  order in which the feed is listed.
	Ideally, it should be possible to have a feed in multiple
  folders (e.g., Pharyngula goes in both "Science" and "Atheism", or
  Daily Kos goes in both "Politics" and "Stuff I Read Daily"), so need
  a separate entry (and nth field) for each instance. And each user.
- Folders can contain subfolders, and so on. So each folder needs a
  pointer to its parent folder.
- LiveJournal plugin (or something): would be nice to be able to say
  "I'm user So-and-so at LiveJournal" (or other site using the LJ
  code) and have it automatically subscribe to your friends feeds
  there.
	Need to somehow keep track of the fact that these feeds were
  auto-generated. If I change my password on LiveJournal, I should
  only have to change it once (in the LJ plugin config) and have the
  engine figure out that the password for all the LJ-friends feeds has
  changed as well.
- Multi-user support: this would be nice. It would also be nice if the
  back-end could avoid duplicating information, i.e., not store two
  records for the same article.
	However, for now, there is enough user-specific information in
  the schema for both feeds and items that this isn't practical. Start
  out with naive implementation, and see if anyone starts using it on
  a multi-user system.
- User authentication: should this be done here, or in .htaccess?
	Go with .htaccess for now.
- Deal with malformed text in the RSS feed, e.g., unescaped or
  poorly-escaped entities, and the like.
- Different skins: full-featured browser vs. palmtop vs. phone, etc.
- Killfile: automatically mark as read messages that match certain
  criteria.
	Perhaps this should have a scoring system or something: I'd
  like to killfile the stories on dKos that match /\w\w-\d\d/ (because
  those talk about specific senate/house races that I generally don't
  care about), but show the ones that match /MD-\d\d/, since I do care
  about those. Or kill the "diary rescue" threads, unless they contain
  "arensb".
- Smart groups: like iTunes smart playlists, or killfiles (above):
  automatically populate a group based on user-specified criteria.
	In fact, ordinary feeds could be implemented with this
  mechanism: the ordinary dKos article list could simply be the set of
  all articles that come from the dKos feed.
- Don't want to automatically display a feed's image: some are good
  (like LJ icons), others are annoying, like FeedBurner feeds that
  just have a "Feed powered by FeedBurner" image.
- Make curl (and other modules) optional: use references-to-functions
  to pick the appropriate function to call:
	function fetch_rss_curl(...) { ... }
	$fetch_rss = fetch_rss_curl;
	$fetch_rss($url);
- Provide hooks for various plugins to do their thing.
	- After adding or updating a feed in the database. Perhaps to
	  add fields to a custom table.
		Could use this to automatically delete subscription to
	  feeds that haven't been updated in a while, e.g., comment
	  threads.
	- After adding or updating an item in the database. Perhaps to
	  add fields to a custom table.
	- Before marking an item as read.
	- Before deleting an item in the database. Perhaps to clean up
	  custom tables.
	- Before deleting a feed in the database. Perhaps to clean up
	  custom tables.
- Feed-parsing plugins: Need to have a hook for items, and another for
  feeds. Don't do this as post-element hooks, because the plugin
  shouldn't be expected to know which element represents an item/feed.
	Also, if plugins add stuff to the bottom of the article text,
  want to give the user some control over the order in which they get
  called.
- In Ajax mode, marking an item as read should tell the server to
  delete it now, so that if you switch from workstation to laptop,
  your feeds are already up to date.
	When marking an item as read, collapse it so it doesn't take
  up much screen real estate, but is still visible in case the user
  didn't mean to mark it. Have a separate button ("refresh"?) to clear
  out read items.
- i18n.
	Can start by identifying translatable strings and marking
  them, so they can be translated later. Define dummy _() and N_()
  functions.
	Can't trust things like $LANG and $LC_* to decide which
  language to translate to. Probably ought to try to guess from
  browser settings. Failing that, use a cookie or an option in the
  database.
- Need a good way to abort in case of error.
- In common.inc (or something), need a good function to abort with an
  error.
- Should have different skins for different uses: in a full-featured
  browser, show everything, use Ajax, etc. On mobile device (PDA,
  phone, etc.) have a more compact skin better adapted to a small
  screen.
	For instance, show just headline, and allow user to delete
  stuff. That should help get rid of the chaff in a small amount of
  screen real estate.
	Mobile device might not have network access at the moment when
  you delete an item. So have a list of items to be deleted. If
  JavaScript is available, periodically try to delete these items.
	Should have an XML skin that just returns the data as XML
  (thus, for instance, it can be used as a feed aggregator for a
  different RSS reader).
- Nokia N810 browser identifies itself as:
  "Mozilla/5.0 (X11; U; Linux armv6l; en-US; rv:1.9a6pre) Gecko/20071128 Firefox/3.0a1 Tablet browser 0.2.2 RX-34+RX-44_2008SE_2.2007.51-3"

  Nokia N810 RSS reader identifies itself as:
  "gnome-vfs/2.16.3 neon/0.25.4"

  Palm T|X browser identifies itself as:
  "Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; PalmSource/Palm-D050; Blazer/4.3) 16;320x320"
	This can be used to pick a default skin.
- One possible way of displaying a feed might be to have a small frame
  at the top, like Google Image results, with a brief identification
  of the item, and navigation arrows to go to the {previous,next}
  {item,feed}. The bottom frame shows the original article.
- FeedBurner plugin: remove the stuff (esp. bugs) that FeedBurner adds
  to bottom of articles.
	Perhaps more generally look for any 1x1 pixel image.
- MediaWiki plugin: if you subscribe to the "recent changes" page on a
  MediaWiki wiki, there should be buttons at the bottom that allow you
  to either mark the change as patrolled, or revert it.
	Unfortunately, this doesn't seem possible.
- Ajax: keybindings for articles:
	'm'	(more) when viewing preview, show full article
	'n'	move to next item
	'd'	mark item as read, and skip to next item
	'u'	mark item as unread, and skip to next item
	?	move to previous item
- Handle attachments (e.g., <media:content>,
  <feedburner:origEnclosureLink>) kind of like a mail reader would:
  put a list at the bottom of the message.
- Plugin for XKCD: copy the alt text underneath the image, so you
  don't have to RTFS or "View Properties" to see it.
- Bookmarklet to find RSS feed for the current page and subscribe to
  it.
	This needs to be robust enough to handle sloppy HTML pages. So
  maybe don't want to use XML parser; rather, use regular expressions.
- LiveJournal plugin should look at the <description> and parse lj
  tags in the body of the item. E.g., expand '<lj:user="foo">' into
  proper HTML.
	Apparently <lj-embed id="<int>" /> indicates an embedded item.
- Security: should probably try to parse the body of any foreign text
  (in particular, summary and body of posts, as well as titles) to
  include only known-good HTML.
	Otherwise, vulnerable to XSS, e.g., by including JavaScript in
  post.
	Perhaps add a whitelist of trusted sites (e.g., APOD).
- Per-feed options:
	- Whether to display oldest-first by default (good for comics)
	  or newest-first (good for news).
	- Whether the feed contains BBcode (like top10).
- Page to set global and per-feed options.
- I think in most cases, where an item has both a summary and a
  content, the summary is just the first N characters of the content
  (modulo HTML formatting and whatnot).
	But in Jesus and Mo, they're both present, and sometimes have
  completely unrelated content. But I think that's the exception.
	Of course, it'd also be nice to include the strip in the feed,
  so it'd probably be good to write a plugin for that anyway, so can
  fix this there.
- Icons for common actions:
	- Refresh (feed, all feeds)
	- Mark as read
- How do skins, templates, scripts, and HTML files interact?
	If a skin wants to link to, say, an "about.html" file that
  gives the author's name, where should the "about.html" file go?
	If a skin uses frames, and therefore requires an HTML file for
  each frame, where do those go?
	What about ancillary files like JavaScript scripts and CSS
  files?
	A skin should come in one directory, for ease of installation
  and removal. Should it be
	myskin/html
	myskin/templates
  OTOH, this means that the skin can't easily contain private elements
  like PHP include files, since those are (preferably) in a separate,
  directory, not visible by the web client.
- Should it be possible to have different skins for different feeds?
  E.g., for the Onion, just seeing the headlines (sometimes summaries)
  is sufficient. For This Modern World, might want a strip-frame at
  the top, and the original site underneath.
- Might be nice to have "lightweight skins": the default skin
  (currently the only skin) is reasonably modular: there's a template
  for viewing a list of items, which in turn uses a template to
  display a single item.
	A lightweight skin could default to view.tpl for displaying a
  list of items, and only provide a custom item.tpl for displaying the
  item itself.
	For that matter, there could be a per-feed option to specify
  the skin to use for that feed's items, and view.tpl could select
  whichever skin is used for that particular feed.
- Perhaps should separate colors and fonts into a separate stylesheet:
  that way, can easily change the color scheme, perhaps even using an
  autogenerated stylesheet.
	Perhaps can call this "outfit": modifies appearance by going
  over the skin, and is easy to change.
- Pages should link to useful stuff: feed page should have
  update/refesh button. update.php should link/redirect to whatever
  was refreshed (either feed page or feed index page, as appropriate).
- RSS doesn't provide content by default, just a summary
  (<description>). Perhaps add a hook after processing <item>, such
  that if there's a <description> but no <content:encoded> or such,
  then move the description to content.
- Keep statistics: keep track of which feeds/groups user reads, how
  often, etc.
	Keep track of how often a feed is updated. Perhaps can have
  rarely-updated feeds percolate to the top.
- Skin for comics that don't include the image in the feed: add an
  <iframe> or something in the view template, that shows the original
  page. Perhaps scroll to a position where the image is visible.
	For gocomics.com, can scroll to <div id="comicTools">.
  Probably sufficient.
	Unfortunately, cross-site permissions don't seem to allow
  manipulating the contents of an <iframe>, not even to scroll the
  window around. But can have
	<iframe src="http://some/url#some-anchor"></iframe>
  where "some-anchor" is an ID or anchor.
	gocomics.com "#comicTools".
	This Modern World: "#post_items".
	I Drew This: no good anchors.
	Jesus and Mo: "#comic"
	Russell's Teapot: no good anchors.
	Zero Punctuation: ?
	The Pain: no good anchors
	Perry Bible Fellowship: "#topimg"
	User Friendly: no good anchors
- Add a way of marking an item as "saved for later".
- Try to make a "collapsed" view for long articles that don't have a
  summary: clip to 10em or something.
- When updating all feeds in Ajax mode: if there's an error, display
  an error icon, perhaps with a tooltip with the error. Or make the
  icon a link that'll pop up the error message.
- Should it be possible to mark a feed as inactive, for feeds that are
  only interesting from time to time, like electoral-vote.com?
- A bunch of elements in the templates have id="..." identifiers
  (body, forms, etc.) Come up with a good naming scheme for them, to
  keep them all straight.
- I suspect the Smarty cache isn't really necessary.
- http://www.smarty.net/manual/en/template.resources.php tells how to
  get templates from any source. Perhaps can set up "skin" scheme, so can use
	$smarty->display("skin:item.tpl");
  and it'll fetch "current-skin/item.tpl" if it exists, or
  "default-skin/item.tpl" otherwise.
	Or could allow a plugin to specify a feed-specific skin,
  either as a record in the database, or as a string.
	In the meantime, just require the "skins/$skin_name" directory
  to contain every template. (Disk space is cheap, right? :-))
- The example in TFM for php_sapi_name() is useful for determining
  whether the script is being called from the command line or as a CGI
  script.
	This, in turn, can be used to implement dual-mode commands. In
  particular, 'update.php' can be called from cron to update every
  hour (or whatever).
- "Today's feeds" could use multiple criteria to come up with
  partially-ordered set: say there are a bunch of unread news stories,
  several unread User Friendly strips, and today's weather report.
	The user could decree that User Friendly should be presented
  in chronological order (i.e., when comparing two User Friendly
  articles, the older one goes on top; when comparing a User Friendly
  article and anything else, the order is undefined).
	The news stories, OTOH, should be presented in reverse
  chronological order (i.e., the newer of two news stories goes on
  top).
	And today's weather report is important, but yesterday's is
  garbage: today's weather report goes above anything else, but
  anything older than the latest one goes at the bottom.
	We can multiply such rules ad infinitum (perhaps look at how
  often a feed is updated, so busy sites don't crowd out the ones that
  update rarely). The idea is, these rules can define a
  partially-ordered set. It would be cool to use these to determine
  the order in which to display articles.
- Rethink how markitems.php works, which arguments it takes. Check
  whichever template calls it (view.tpl and item.tpl?).
	The easiest, no-JavaScript case is probably the way FoF does
  it: if we're displaying unread items, give the option of marking
  items as read. If we're displaying all items, give the option of
  marking items as unread.
	Perhaps do this by adding a hidden "new_state" input field to
  the form (and of course update markitems.php to check for it).
	With JavaScript, we can toggle the state of each item as the
  user requests.
- Picking which skin to display:
	- Specified in URL, otherwise
	- From cookie, otherwise
	- From option, otherwise
	- "default".
- There are a bunch of times when it's handy to parse XML files:
  reading RSS feeds, importing OPML, parsing HTML pages to find the
  feeds, etc.
	Would it be helpful to have a generic function that parses any
  kind of HTML/XML/XHTML file into a data structure? That could make
  it simpler to switch from one back-end XML parser to another, if
  desired.
- There are Mozilla- and Safari-specific bits in the CSS files. Is it
  worth adding yet another CSS file, for browser-specific CSS?
	Might be worth it: IE doesn't appear to support rounded
  borders, so the left and right padding on Firefox and Safari makes
  it look weird.
- In item.tpl, put "Read more" in item-footer.
- For nonstandard HTML attributes like which="collapsed", should
  probably use xmlns:nb="..." and nb:which="collapsed", just to try to
  be standards-compliant.
- Name: in "2001", Clarke described a tablet PC that served as a
  customized newspaper. Did he give it a name?
	Yes: Newspad
- Add author to item.tpl (U+2709 == envelope; U+270d == writing hand)
- Add redirect to unsub.
- Jira generates wonky RSS.
	- https://issues.apache.org/
	- Select 'Jira'
	- Select a project (e.g., 'mod_python')
	- Get a list of open bugs
  The page has "RSS (Issues | Comments)". There's also a
  '<link rel="alternate"' in the header that points to an RSS 0.92
  feed. But the two are not identical.
	The feed from <head> is non-conforming: it contains
  nonstandard elements.
- Combine the two instances of curl initialization code in update.php
- How should items.pub_time and items.last_update work together?
	The intent is that if an article is first written on Jan. 1,
  then updated on Jan. 5, then it'll show up at the top of "today's
  news" on Jan. 5 (assuming it's still unread).
	There are several complicating factors:
	- Some feeds don't include publishing or update times.
	- Some feeds lie and give the current time for every item.
	  (examples?)
