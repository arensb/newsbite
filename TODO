- Bug: update_feed() prints to stdout, which is only appropriate some
  of the time. Add callbacks for starting/ending update.
- Might be useful to add gestures, for portable devices. See
  http://depts.washington.edu/aimgroup/proj/dollar/
	On the N810, one can scroll the display by drawing on it. So
  adding gesture recognition is likely to play havoc with that.
  Perhaps hard-code straight-line templates, and implement scrolling
  manually.
	That implementation is rotation-independent: "v" can be
  drawn as ">" and still be recognized as "v". To fix this, can divide
  space into quadrants (or octants) centered on centroid, and classify
  shapes based on where the starting point is WRT the starting point.
  This way, "v" would have the starting point in the NW quadrant,
  while ">" would have it in the SW quadrant, so they'd be seen as
  different.
	This is particularly important because it would be desirable
  to have straight lines at different angles (e.g., stroke up to go to
  previous article, stroke down to go to next article), while the $1
  gesture algorithm would see those as the same shape.
	To have straight lines, it would be necessary to add the hacks
  they suuggest in the paper: check to see whether one of the
  dimensions is "too small".
	The distance calculation has a square root. This seems
  expensive and unnecessary, since we're only trying to find the
  closest match. Might save some CPU cycles.
	Which gestures would we want?
	- Go to previous article
	- Go to next article
	- Mark as read and move to next article
	- Mark as unread?
	- Refresh list of articles
- Link on feeds page (in both skins) to show inactive feeds, with
  option to reactivate them.
- bug: When updating feeds, sometimes spinner keeps going forever. Why?
- bug: When Ajax updates feeds, it doesn't notice updates to the list
  of feeds.
	Perhaps when updating all, update.php should append a list of
  known feeds. If it's out of date, JS can request a full list.
- bug: When updates take too long, PHP terminates. 30 sec. max.
	This is a curl error, and should be caught. Error at
                $err = curl_multi_select($mh);
  This doesn't seem to be a simple case of an operation exceeding a
  timeout.
- bug: when on the last page (earliest items) and use "mark all as
  read", sometimes get blank page.
	Is this just the N810 browser being wonky?
- Need tool to fix database schema.
	ALTER TABLE items CHANGE COLUMN url url VARCHAR(255);
	ALTER TABLE items CHANGE COLUMN comment_url comment_url VARCHAR(255);
	ALTER TABLE items CHANGE COLUMN comment_rss comment_rss VARCHAR(255);
- bug-ish: when marking a feed as inactive, get redirected back to it.
  This is bogus.
- Ajax: "Clear changes" should go through list of items and uncheck
  them.
- Ajax feed update: use regular expressions to find lines in JSON
  text. Text is sometimes truncated in the middle of a line, resulting
  in parse errors.
- Ajax "Update feed"/"Update all feeds" should update article count
  (and feed title, if it's changed). So presumably the Right Thing is
  to send the new status line as part of JSON status message.
	Should there be a separate template for this?
- Should be able to read both read and unread articles.
- Limit size of articles (to one N810 screenful?)
- Would be nice to have either "new" flag or a "saved for later" flag.
  The latter is probably more useful.
	That way, can go through today's stuff fairly quickly, without
  having to scroll through messages you've already seen.
- (bug?) Bad HTML in item description/content causes parse errors in
  XMLReader. This is going to crop up a lot, and should be fixed.
	Worst solution: skip the entire feed, making it unusable until
  the bad article expires. (Currently implemented.)
	Better solution: just skip the article, and proceed with the
  next one. Presumably this involves checkpointing when each article
  begins, and skipping the bad ones.
	Better solution: just skip the bad element, and somehow mark
  it bad in a user-visible way. Again, this involves checkpointing.
	Better solution?: Punt: bad XML is not necessarily bad HTML,
  at least so bad that a browser can't deal with it (Firefox displays
  "&#2;" as a gray box; Safari seems to remove them from the source
  altogether. Try to suck out the bits between <description> and
  </description> as a string, and leave it up to the browser to render
  it. Unfortunately, this invites XSS attacks.
	Hack solution: look for /&#\d{0,2};/ and fix them.

	Unfortunately, XMLReader doesn't seem to support
  checkpointing. Perhaps another XML module can deal with this more
  gracefully? OTOH, is it a good idea to be too liberal in what we
  accept? Isn't that an invitation to XSS? XML is supposed to be
  really anal about syntax.
- Make a list of conditions for calling it version 2.0
	- Fully-functional Ajax skin
		- XXX - Meaning what, exactly?
- Makefile:
	Run tests:
		php -l <everything>
		Try to call various functions and make sure they return
		correct results
		php-cgi -c php.ini <script>
- Documentation for how the plugins for feed.inc work.
	Texinfo? Add code to Makefile to generate HTML documentation.
- More fine-grained function to select items from a feed:
	- One feed, or all feeds
	- Time range: e.g., the last 24 hours
	- Order: oldest to youngest/youngest to oldest
	- How many articles to get
- Passwords probably shouldn't be stored in database. As first pass,
  try removing them from the database. Put them in another file, and
  add functions to read and write passwords.
	Plus, it's possible that at some point it'll become
  necessary/desirable to use authentication methods other than
  username/password, possibly involving certificate exchange or
  something.
- Should be able to specify password for all of livejournal.com, not
  have to specify it separately for every LJ feed.
	Use parse_url() to get hostname.
	LJ friends feeds in OPML format:
  http://www.livejournal.com/tools/opml.bml?user=arensb
- Tool to import feeds and items from existing Feed on
  Feeds/Monkeychow database.
- SQL schema should support folders, i.e., user can group feeds into
  categories. By default, all feeds go in a " root" folder (the
  leading space marks this as special; strip space from user-defined
  folders).
	Folders can contain subfolders, and so on. So each folder
  needs a pointer to its parent folder.
- Ajax: user should also be able to drag feeds around, so they're
  listed in arbitrary order. Need an "nth" field somewhere, giving the
  numeric order in which the feed is listed.
	Ideally, it should be possible to have a feed in multiple
  folders (e.g., Pharyngula goes in both "Science" and "Atheism", or
  Daily Kos goes in both "Politics" and "Stuff I Read Daily"), so need
  a separate entry (and nth field) for each instance. And each user.
- LiveJournal plugin (or something): would be nice to be able to say
  "I'm user So-and-so at LiveJournal" (or other site using the LJ
  code) and have it automatically subscribe to your friends feeds
  there.
	Need to somehow keep track of the fact that these feeds were
  auto-generated. If I change my password on LiveJournal, I should
  only have to change it once (in the LJ plugin config) and have the
  engine figure out that the password for all the LJ-friends feeds has
  changed as well.
- Multi-user support: this would be nice. It would also be nice if the
  back-end could avoid duplicating information, i.e., not store two
  records for the same article.
	However, for now, there is enough user-specific information in
  the schema for both feeds and items that this isn't practical. Start
  out with naive implementation, and see if anyone starts using it on
  a multi-user system.
- Deal with malformed text in the RSS feed, e.g., unescaped or
  poorly-escaped entities, and the like.
- Killfile: automatically mark as read messages that match certain
  criteria.
	Perhaps this should have a scoring system or something: I'd
  like to killfile the stories on dKos that match /\w\w-\d\d/ (because
  those talk about specific senate/house races that I generally don't
  care about), but show the ones that match /MD-\d\d/, since I do care
  about those. Or kill the "diary rescue" threads, unless they contain
  "arensb".
	Should probably be done in plugin.
- Smart groups: like iTunes smart playlists, or killfiles (above):
  automatically populate a group based on user-specified criteria.
	In fact, ordinary feeds could be implemented with this
  mechanism: the ordinary dKos article list could simply be the set of
  all articles that come from the dKos feed.
- Don't want to automatically display a feed's image: some are good
  (like LJ icons), others are annoying, like FeedBurner feeds that
  just have a "Feed powered by FeedBurner" image.
- Make curl (and other modules) optional: use references-to-functions
  to pick the appropriate function to call:
	function fetch_rss_curl(...) { ... }
	$fetch_rss = fetch_rss_curl;
	$fetch_rss($url);
- Provide hooks for various plugins to do their thing.
	- After adding or updating a feed in the database. Perhaps to
	  add fields to a custom table.
		Could use this to automatically delete subscription to
	  feeds that haven't been updated in a while, e.g., comment
	  threads.
	- After adding or updating an item in the database. Perhaps to
	  add fields to a custom table.
	- Before marking an item as read.
	- Before deleting an item in the database. Perhaps to clean up
	  custom tables.
	- Before deleting a feed in the database. Perhaps to clean up
	  custom tables.
- Feed-parsing plugins: Need to have a hook for items, and another for
  feeds. Don't do this as post-element hooks, because the plugin
  shouldn't be expected to know which element represents an item/feed.
	Also, if plugins add stuff to the bottom of the article text,
  want to give the user some control over the order in which they get
  called.
- i18n.
	Can start by identifying translatable strings and marking
  them, so they can be translated later. Define dummy _() and N_()
  functions.
	Can't trust things like $LANG and $LC_* to decide which
  language to translate to. Probably ought to try to guess from
  browser settings. Failing that, use a cookie or an option in the
  database.
- Should have different skins for different uses: in a full-featured
  browser, show everything, use Ajax, etc. On mobile device (PDA,
  phone, etc.) have a more compact skin better adapted to a small
  screen.
	For instance, show just headline, and allow user to delete
  stuff. That should help get rid of the chaff in a small amount of
  screen real estate.
	Mobile device might not have network access at the moment when
  you delete an item. So have a list of items to be deleted. If
  JavaScript is available, periodically try to delete these items.
	Should have an XML skin that just returns the data as XML
  (thus, for instance, it can be used as a feed aggregator for a
  different RSS reader).
- Nokia N810 browser identifies itself as:
  "Mozilla/5.0 (X11; U; Linux armv6l; en-US; rv:1.9a6pre) Gecko/20071128 Firefox/3.0a1 Tablet browser 0.2.2 RX-34+RX-44_2008SE_2.2007.51-3"

  Nokia N810 RSS reader identifies itself as:
  "gnome-vfs/2.16.3 neon/0.25.4"

  Palm T|X browser identifies itself as:
  "Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; PalmSource/Palm-D050; Blazer/4.3) 16;320x320"
	This can be used to pick a default skin.
- One possible way of displaying a feed might be to have a small frame
  at the top, like Google Image results, with a brief identification
  of the item, and navigation arrows to go to the {previous,next}
  {item,feed}. The bottom frame shows the original article.
- FeedBurner plugin: remove the stuff (esp. bugs) that FeedBurner adds
  to bottom of articles.
	Perhaps more generally look for any 1x1 pixel image.
- MediaWiki plugin: if you subscribe to the "recent changes" page on a
  MediaWiki wiki, there should be buttons at the bottom that allow you
  to either mark the change as patrolled, or revert it.
	Unfortunately, this doesn't seem possible.
- Ajax: keybindings for articles:
	'm'	(more) when viewing preview, show full article
	'n'	move to next item
	'd'	mark item as read, and skip to next item
	'u'	mark item as unread, and skip to next item
	?	move to previous item
- Handle attachments (e.g., <media:content>,
  <feedburner:origEnclosureLink>) kind of like a mail reader would:
  put a list at the bottom of the message.
- Plugin for XKCD: copy the alt text underneath the image, so you
  don't have to RTFS or "View Properties" to see it.
	(Or, if you want to get fancy: abduct the tooltip stuff and
  write a replacement that shows the entire title, like Google does.)
- Bookmarklet to find RSS feed for the current page and subscribe to
  it.
	This needs to be robust enough to handle sloppy HTML pages. So
  maybe don't want to use XML parser; rather, use regular expressions.
- LiveJournal plugin should look at the <description> and parse lj
  tags in the body of the item. E.g., expand '<lj:user="foo">' into
  proper HTML.
	Apparently <lj-embed id="<int>" /> indicates an embedded item.
- Security: should probably try to parse the body of any foreign text
  (in particular, summary and body of posts, as well as titles) to
  include only known-good HTML.
	Otherwise, vulnerable to XSS, e.g., by including JavaScript in
  post.
	Perhaps add a whitelist of trusted sites (e.g., APOD).
- Per-feed options:
	- Whether to display oldest-first by default (good for comics)
	  or newest-first (good for news).
	- Whether the feed contains BBcode (like top10).
- Page to set global and per-feed options.
- Icons for common actions:
	- Refresh (feed, all feeds)
	- Mark as read
- How do skins, templates, scripts, and HTML files interact?
	If a skin wants to link to, say, an "about.html" file that
  gives the author's name, where should the "about.html" file go?
	If a skin uses frames, and therefore requires an HTML file for
  each frame, where do those go?
	What about ancillary files like JavaScript scripts and CSS
  files?
	A skin should come in one directory, for ease of installation
  and removal. Should it be
	myskin/html
	myskin/templates
  OTOH, this means that the skin can't easily contain private elements
  like PHP include files, since those are (preferably) in a separate,
  directory, not visible by the web client.
- Should it be possible to have different skins for different feeds?
  E.g., for the Onion, just seeing the headlines (sometimes summaries)
  is sufficient. For This Modern World, might want a strip-frame at
  the top, and the original site underneath.
- Might be nice to have "lightweight skins": the default skin
  (currently the only skin) is reasonably modular: there's a template
  for viewing a list of items, which in turn uses a template to
  display a single item.
	A lightweight skin could default to view.tpl for displaying a
  list of items, and only provide a custom item.tpl for displaying the
  item itself.
	For that matter, there could be a per-feed option to specify
  the skin to use for that feed's items, and view.tpl could select
  whichever skin is used for that particular feed.
- Perhaps should separate colors and fonts into a separate stylesheet:
  that way, can easily change the color scheme, perhaps even using an
  autogenerated stylesheet.
	Perhaps can call this "outfit": modifies appearance by going
  over the skin, and is easy to change.
- RSS doesn't provide content by default, just a summary
  (<description>). Perhaps add a hook after processing <item>, such
  that if there's a <description> but no <content:encoded> or such,
  then move the description to content.
- Keep statistics: keep track of which feeds/groups user reads, how
  often, etc.
	Keep track of how often a feed is updated. Perhaps can have
  rarely-updated feeds percolate to the top.
- Skin for comics that don't include the image in the feed: add an
  <iframe> or something in the view template, that shows the original
  page. Perhaps scroll to a position where the image is visible.
	For gocomics.com, can scroll to <div id="comicTools">.
  Probably sufficient.
	Unfortunately, cross-site permissions don't seem to allow
  manipulating the contents of an <iframe>, not even to scroll the
  window around. But can have
	<iframe src="http://some/url#some-anchor"></iframe>
  where "some-anchor" is an ID or anchor.
	gocomics.com "#comicTools".
	This Modern World: "#post_items".
	I Drew This: no good anchors.
	Jesus and Mo: "#comic"
	Russell's Teapot: no good anchors.
	Zero Punctuation: ?
	The Pain: no good anchors
	Perry Bible Fellowship: "#topimg"
	User Friendly: no good anchors
- Add a way of marking an item as "saved for later".
- Try to make a "collapsed" view for long articles that don't have a
  summary: clip to 10em or something.
- A bunch of elements in the templates have id="..." identifiers
  (body, forms, etc.) Come up with a good naming scheme for them, to
  keep them all straight.
- http://www.smarty.net/manual/en/template.resources.php tells how to
  get templates from any source. Perhaps can set up "skin" scheme, so can use
	$smarty->display("skin:item.tpl");
  and it'll fetch "current-skin/item.tpl" if it exists, or
  "default-skin/item.tpl" otherwise.
	Or could allow a plugin to specify a feed-specific skin,
  either as a record in the database, or as a string.
	In the meantime, just require the "skins/$skin_name" directory
  to contain every template. (Disk space is cheap, right? :-))
- The example in TFM for php_sapi_name() is useful for determining
  whether the script is being called from the command line or as a CGI
  script.
	This, in turn, can be used to implement dual-mode commands. In
  particular, 'update.php' can be called from cron to update every
  hour (or whatever).
- "Today's feeds" could use multiple criteria to come up with
  partially-ordered set: say there are a bunch of unread news stories,
  several unread User Friendly strips, and today's weather report.
	The user could decree that User Friendly should be presented
  in chronological order (i.e., when comparing two User Friendly
  articles, the older one goes on top; when comparing a User Friendly
  article and anything else, the order is undefined).
	The news stories, OTOH, should be presented in reverse
  chronological order (i.e., the newer of two news stories goes on
  top).
	And today's weather report is important, but yesterday's is
  garbage: today's weather report goes above anything else, but
  anything older than the latest one goes at the bottom.
	We can multiply such rules ad infinitum (perhaps look at how
  often a feed is updated, so busy sites don't crowd out the ones that
  update rarely). The idea is, these rules can define a
  partially-ordered set. It would be cool to use these to determine
  the order in which to display articles.
- Rethink how markitems.php works, which arguments it takes. Check
  whichever template calls it (view.tpl and item.tpl?).
	The easiest, no-JavaScript case is probably the way FoF does
  it: if we're displaying unread items, give the option of marking
  items as read. If we're displaying all items, give the option of
  marking items as unread.
	Perhaps do this by adding a hidden "new_state" input field to
  the form (and of course update markitems.php to check for it).
	With JavaScript, we can toggle the state of each item as the
  user requests.
- Picking which skin to display:
	- Specified in URL, otherwise
	- From cookie, otherwise
	- From option, otherwise
	- "default".
- There are a bunch of times when it's handy to parse XML files:
  reading RSS feeds, importing OPML, parsing HTML pages to find the
  feeds, etc.
	Would it be helpful to have a generic function that parses any
  kind of HTML/XML/XHTML file into a data structure? That could make
  it simpler to switch from one back-end XML parser to another, if
  desired.
- There are Mozilla- and Safari-specific bits in the CSS files. Is it
  worth adding yet another CSS file, for browser-specific CSS?
	Might be worth it: IE doesn't appear to support rounded
  borders, so the left and right padding on Firefox and Safari makes
  it look weird.
- For nonstandard HTML attributes like which="collapsed", should
  probably use xmlns:nb="..." and nb:which="collapsed", just to try to
  be standards-compliant.
- Name: in "2001", Clarke described a tablet PC that served as a
  customized newspaper. Did he give it a name?
	Yes: Newspad
- Jira generates wonky RSS.
	- https://issues.apache.org/
	- Select 'Jira'
	- Select a project (e.g., 'mod_python')
	- Get a list of open bugs
  The page has "RSS (Issues | Comments)". There's also a
  '<link rel="alternate"' in the header that points to an RSS 0.92
  feed. But the two are not identical.
	The feed from <head> is non-conforming: it contains
  nonstandard elements.
- How should items.pub_time and items.last_update work together?
	The intent is that if an article is first written on Jan. 1,
  then updated on Jan. 5, then it'll show up at the top of "today's
  news" on Jan. 5 (assuming it's still unread).
	There are several complicating factors:
	- Some feeds don't include publishing or update times.
	- Some feeds lie and give the current time for every item.
	  (examples?)
- Should probably combine "edit feed" and "unsubscribe from feed".
- Navigation arrows ("Earlier"/"Later") should be based on the number
  of posts that match the display criteria. It is absurd to have an
  "Earlier" link on a page that also says "There are no items to
  display". Check numbers from db_get_feed_counts().
- Try to unite update_feed() and update_all_feeds()
- LJ feeds give the same URL for "read more" and comments. Does it
  make sense to combine the two in item.tpl?
- Ought to support categories. WaPo feeds, in particular, have lots of
  them.
	Presumably should add another table, with {item-id, scheme,
  category} tuples. The scheme is for particular setups (like the
  "media:" RSS extension, or Slashdot's categories). That way, can
  show all posts in a given {scheme, category}, or all posts in a
  given {category}.
	Can also create category cloud, to see which keywords are most
  active ATM.
- INSTALL: say to make backup of: db, .htaccess, config.inc.
- Perhaps should have something in the database (in global options?)
  that gives the version number of the database schema. That way, can
  detect whether database is out of date wrt PHP scripts.
	Another possibility would be to add an 'upgrade.php' script to
  the distro: 'common.inc' includes that, upgrades the installation,
  then deletes itself.
	In order to be allowed to delete itself, the script should be
  put in a directory that the httpd user can write to: the Smarty
  compile directory. Yes, this is a hack.
- Remove the smarty/{config,templates_c} out of the distro.
  Probably should remove them altogether.
- Run timing tests with different numbers of feeds. See if there's a
  way to estimate a good number of parallel connections.
	If there is, allow user to set $PARALLEL_UPDATES to "auto",
  and have it be computed automatically.
- How should abort() deal with JSON/XML/whatever non-HTML output?
- Ajax/Firefox: use client-side storage (DOM::Storage) to cache
  articles.
- Is there a way to normalize HTML? If the <![CDATA[...]]> section in
  a feed contains mismatched tags, e.g.
	<p><a ...><img/></p>
  is there a way to keep the badness contained within the <div item>
  when it's displayed, and not contaminate the rest of the page?
	Iframes seem ugly. Perhaps one of the XML parsers can parse
  HTML and deal with errors?
- Perhaps class Skin can try to be a singleton: that way, if multiple
  files call 'new Skin', they'll both refer to the same object. OTOH,
  that should never happen.
- Perhaps expand the notion of "feed": could show email, current
  weather conditions, Nagios alerts, etc.
- Class Skin should automatically set $skin_dir variable to the
  (relative) subdirectory where skin files are found.
- Perhaps add a "collapse all" button in view.tpl that'll collapse all
  displayed items.
- In main view: have a button to toggle displaying feeds with no
  unread items. This could be difficult, since the color of rows is
  set by their class, which in turn is in the .tpl file.
- Plug-in for Atheist Nexus (and others): the body of the item is
  presented as HTML, but is actually plain text, using \n\n as
  paragraph separators. Add <p>...</p> tags.
- Make things prettier:
	- Background image
	- Perhaps translucent elements/backgrounds
	- Button bars with gradient backgrounds
- Possible backgrounds:
	http://www.imageabstraction.com/gallery/index.php?action=showpic&cat=11&pic=64
	http://www.imageabstraction.com/gallery/index.php?action=showpic&cat=11&pic=57
	http://www.imageabstraction.com/gallery/index.php?action=showpic&cat=11&pic=58
	http://www.imageabstraction.com/gallery/index.php?action=showpic&cat=11&pic=59
	http://www.imageabstraction.com/gallery/index.php?action=showpic&cat=10&pic=90
- When collapsing an item to just show the summary, scroll the window
  so that the article doesn't move: if clicking the bottom collapse
  bar, scroll so that the bottom of the item remains at the same
  position in the window.
